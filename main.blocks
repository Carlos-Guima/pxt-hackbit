<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="=+#TV-hxYxvl.KjDS[%}" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="FGyElq;2kes|%4G?I=H-" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace hackbit {" line1="    const initRegisterArray: number[] = [" line2="        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17," line3="        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F," line4="        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14," line5="        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27," line6="        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01," line7="        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00," line8="        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20," line9="        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37," line10="        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A," line11="        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F," line12="        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30," line13="        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19," line14="        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04," line15="        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00," line16="        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00," line17="        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F," line18="        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07," line19="        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01," line20="        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F," line21="        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01," line22="        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40," line23="        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E," line24="        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00," line25="        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08," line26="        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00," line27="        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01," line28="        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01," line29="        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01" line30="    ];" line31="" line32="    export enum MotorDirection {" line33="        //% block=&quot;Forward&quot;" line34="        Forward = 1," line35="        //% block=&quot;Backward&quot;" line36="        Reverse = 2," line37="        //% block=&quot;Stop&quot;" line38="        Stop = 0" line39="    }" line40="" line41="    export enum OnOff {" line42="        //% block=&quot;On&quot;" line43="        On = 1," line44="        //% block=&quot;Off&quot;" line45="        Off = 0" line46="    }" line47="" line48="    export enum BP {" line49="        //% block=&quot;BPA&quot;" line50="        BPA = 1," line51="        //% block=&quot;BPB&quot;" line52="        BPB = 0" line53="    }" line54="" line55="    export enum RobotDirection {" line56="        //% block=&quot;Forward&quot;" line57="        Forward," line58="        //% block=&quot;Backward&quot;" line59="        Reverse," line60="        //% block=&quot;Turn Right&quot;" line61="        TurnRigh," line62="        //% block=&quot;Turn Left&quot;" line63="        TurnLef," line64="        //% block=&quot;Rotate Right&quot;" line65="        RotateRight," line66="        //% block=&quot;Rotate Left&quot;" line67="        RotateLef," line68="        //% block=&quot;Stop&quot;" line69="        Stop" line70="    }" line71="" line72="    export enum Motors {" line73="        //%blockId=A4_Robot_Driver_motor_one" line74="        //% block=&quot;left motor&quot;" line75="        Motor1," line76="        //%blockId=A4_Robot_Driver_motor_two" line77="        //% block=&quot;right motor&quot;" line78="        Motor2," line79="        //%blockId=A4_Robot_Driver_motor_full" line80="        //% block=&quot;left and right motor&quot;" line81="        MotorFull" line82="    }" line83="" line84="    export enum Color {" line85="        //% block=&quot;Red&quot;" line86="        Red," line87="        //% block=&quot;Green&quot;" line88="        Green," line89="        //% block=&quot;Blue&quot;" line90="        Blue," line91="        //% block=&quot;Clear&quot;" line92="        Clear" line93="    }" line94="" line95="    export enum GroveGesture {" line96="        //% block=None" line97="        None = 0," line98="        //% block=Right" line99="        Right = 1," line100="        //% block=Left" line101="        Left = 2," line102="        //% block=Up" line103="        Up = 3," line104="        //% block=Down" line105="        Down = 4," line106="        //% block=Forward" line107="        Forward = 5," line108="        //% block=Backward" line109="        Backward = 6," line110="        //% block=Clockwise" line111="        Clockwise = 7," line112="        //% block=Anticlockwise" line113="        Anticlockwise = 8," line114="        //% block=Wave" line115="        Wave = 9" line116="    }" line117="" line118="    export let _speed_left = 700; //1023 = 100% speed" line119="    export let _speed_right = 700;" line120="    export let _dir_right = 1; //0 = stop, 1 = forward, 2 = backward" line121="    export let _dir_left = 1;" line122="    export let identifiant = 0;" line123="    export let grovegestureinit = 0;" line124="" line125="    let TubeTab: number[] = [" line126="        0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07," line127="        0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71" line128="    ];" line129="" line130="    export let digit_clkPin: DigitalPin;" line131="    export let digit_dataPin: DigitalPin;" line132="    export let digit_brightnessLevel: number;" line133="    export let digit_pointFlag: boolean;" line134="    export let digit_buf: Buffer;" line135="" line136="    /**" line137="     * Iot ThingSpeak" line138="    **/" line139="    " line140="    let wifi_connected: boolean = false" line141="    let thingspeak_connected: boolean = false" line142="    let last_upload_successful: boolean = false" line143="" line144="    /**" line145="     * end Iot ThingSpeak" line146="    **/" line147="" line148="" line149="    /**" line150="     * Control Robot speed [0-100%]" line151="     * @param dir direction" line152="     * @param speed speed in %" line153="     */" line154="    //% blockId=RobotDriverRobotMove" line155="    //% block=&quot;move %dir| speed %speed&quot;" line156="    //% speed.min=0 speed.max=100" line157="    //% parts=&quot;RobotDriver&quot; advanced=false" line158="    //% speed.defl=75" line159="    //% subcategory=Motor  group=&quot;Motors DC&quot; color=#FF1344 icon=&quot;\uf1eb&quot;" line160="    export function robotMove(dir: RobotDirection, speed: number): void {" line161="        setSpeed(Motors.MotorFull, speed);" line162="        switch (dir) {" line163="            case RobotDirection.Forward:" line164="                setDir(Motors.MotorFull, MotorDirection.Forward);" line165="                break" line166="            case RobotDirection.Reverse:" line167="                setDir(Motors.MotorFull, MotorDirection.Reverse);" line168="                break" line169="            case RobotDirection.RotateRight:" line170="                setDir(Motors.Motor1, MotorDirection.Forward);" line171="                setDir(Motors.Motor2, MotorDirection.Reverse);" line172="                break" line173="            case RobotDirection.RotateLef:" line174="                setDir(Motors.Motor1, MotorDirection.Reverse);" line175="                setDir(Motors.Motor2, MotorDirection.Forward);" line176="                break" line177="            case RobotDirection.TurnRigh:" line178="                setDir(Motors.Motor1, MotorDirection.Forward);" line179="                setDir(Motors.Motor2, MotorDirection.Stop);" line180="                break" line181="            case RobotDirection.TurnLef:" line182="                setDir(Motors.Motor1, MotorDirection.Stop);" line183="                setDir(Motors.Motor2, MotorDirection.Forward);" line184="                break" line185="            case RobotDirection.Stop:" line186="                setDir(Motors.MotorFull, MotorDirection.Stop);" line187="                break" line188="        }" line189="        setMotors();" line190="    }" line191="" line192="" line193="    /**" line194="     * Change the motor direction" line195="     * @param motor selection (left, right)" line196="     * @param dir rotation direction (forward, backward)" line197="     */" line198="    //% blockId=RobotDrivermotordir" line199="    //% block=&quot;set %motor| %dir&quot;" line200="    //% parts=&quot;RobotDriver&quot; advanced=false" line201="    //% motor.defl=MotorFull" line202="    //% subcategory=Motor  group=&quot;Motors DC&quot; color=#FF1344" line203="    export function motorDir(motor: Motors, dir: MotorDirection): void {" line204="        setDir(motor, dir);" line205="        setMotors();" line206="    }" line207="" line208="    /**" line209="     * Change the motor speed [0-100%]" line210="     * @param motor selection (left, right)" line211="     * @param new speed (0-100%)" line212="     */" line213="" line214="    //% blockId=robotdrivermotorspeed" line215="    //% block=&quot;set %motor| to %speed %&quot;" line216="    //% speed.min=0 speed.max=100" line217="    //% parts=&quot;A4_Robot_Driver&quot; advanced=false" line218="    //% speed.defl=75" line219="    //% subcategory=Motor  group=&quot;Motors DC&quot; color=#FF1344" line220="    export function motorSpeed(motor: Motors, speed: number): void {" line221="        setSpeed(motor, speed);" line222="        setMotors();" line223="    }" line224="" line225="    /**" line226="     * Stop both motors" line227="    */" line228="    //% blockId=RobotDriverRobotStop" line229="    //% block=&quot;stop both motors&quot;" line230="    //% subcategory=Motor  group=&quot;Motors DC&quot; color=#FF1344" line231="    export function motorStop(): void {" line232="        robotMove(hackbit.RobotDirection.Stop, 0)" line233="    }" line234="" line235="    /**" line236="     * Set the servomotor position [0-180deg]" line237="     * @param pin servomotor pin (right or left)" line238="     */" line239="    //% blockId=RobotDriverservodegrees" line240="    //% block=&quot;servomotor |%pin| to |%angle| degree&quot;" line241="    //% parts=&quot;RobotDriver&quot; advanced=false" line242="    //% angle.shadow=&quot;protractorPicker&quot;" line243="    //% angle.defl=90" line244="    //% subcategory=Motor  group=&quot;Servo Motors&quot; color=#FF1344" line245="    export function setServoMotor(pin: AnalogPin, angle: number): void {" line246="        pins.servoWritePin(pin, Math.constrain(angle, 0, 180));" line247="    }" line248="" line249="    /**" line250="     * get distance from ultrasonic range sensor [cm]" line251="     * @param pin Input pin" line252="     */" line253="    //% blockId=RobotDriverultrasonic_cm " line254="    //% block=&quot;ultrasonic distance|%name| (cm)&quot;" line255="    //% name.fieldEditor=&quot;gridpicker&quot; " line256="    //% name.fieldOptions.columns=5" line257="    //% name.fieldOptions.tooltips=&quot;false&quot;" line258="    //% name.fieldOptions.width=&quot;0&quot;" line259="    //% subcategory=Sensor  group=&quot;Digital&quot; color=#1371FF" line260="    export function measureDistanceCentimeter(name: DigitalPin): number {" line261="        let duration = 0;" line262="        let distance = 0;" line263="        pins.digitalWritePin(name, 0); //make sure pin is low" line264="        control.waitMicros(2);" line265="        pins.digitalWritePin(name, 1); //send echo" line266="        control.waitMicros(20);" line267="        pins.digitalWritePin(name, 0);" line268="        duration = pins.pulseIn(name, PulseValue.High, 50000); // Max duration 50 ms - receive echo" line269="        distance = duration * 153 / 29 / 2 / 100;" line270="        Math.constrain(distance, 0, 500);" line271="        return distance;" line272="    }" line273="" line274="    /**" line275="     * Get line sensor state [0-1]" line276="    */" line277="    //% blockId=hackbitLineRead" line278="    //% block=&quot;line sensor |%pin|&quot;" line279="    //% subcategory=Sensor  group=&quot;Digital&quot; color=#1371FF        " line280="    export function detectline(pin: DigitalPin): number {" line281="        return pins.digitalReadPin(pin);" line282="    }" line283="" line284="    /**" line285="     * Get analog potentiometer value [0-1023]" line286="    */" line287="    //% blockId=hackbitPotargRead" line288="    //% block=&quot;potentiometer |%pin|&quot;" line289="    //% subcategory=Input  group=&quot;Analog&quot; color=#851DE8" line290="    export function potarValue(pin: AnalogPin): number {" line291="        return pins.analogReadPin(pin);" line292="    }" line293="" line294="    /**" line295="     * Get collision sensor state [0-1]" line296="    */" line297="    //% blockId=hackbitCollisionRead" line298="    //% block=&quot;collision sensor |%pin|&quot;" line299="    //% subcategory=Input  group=&quot;Digital&quot; color=#851DE8    " line300="    export function collisionSensor(pin: BP): boolean {" line301="        if (pin)" line302="            return input.buttonIsPressed(Button.A);" line303="        return input.buttonIsPressed(Button.B);" line304="    }" line305="" line306="    /**" line307="     * Get button state [0-1]" line308="    */" line309="    //% blockId=hackbitButtonRead" line310="    //% block=&quot;button |%pin|&quot;" line311="    //% subcategory=Input  group=&quot;Digital&quot; color=#851DE8    " line312="    export function buttonState(pin: DigitalPin): number {" line313="        return pins.digitalReadPin(pin);" line314="    }" line315="" line316="    /**" line317="     * Set Led state" line318="    */" line319="    //% blockId=hackbitLedSet" line320="    //% block=&quot;led |%pin| to |%state|&quot;" line321="    //% state.min=0 state.max=1" line322="    //% subcategory=Display  group=&quot;Digital&quot; color=#F57513    " line323="    export function ledState(pin: DigitalPin, state: OnOff): void {" line324="        pins.digitalWritePin(pin, state);" line325="    }" line326="" line327="    /**" line328="    * Get color from I2C Grove Color Sensor v1.3 or v2.0" line329="    * [0;65534]" line330="    * @param selected color" line331="    */" line332="    //% blockId=&quot;grovecolorsensorgetcolor&quot; " line333="    //% block=&quot;color %Color&quot;" line334="    //% block.loc.fr=&quot;Valeur de la couleur %Color du capteur de couleur grove&quot;" line335="    //% jsdoc = &quot;Grab sensor value from grove color sensor&quot;" line336="    //% subcategory=Sensor  group=&quot;IIC&quot; color=#EA5532    " line337="" line338="    export function color(col: Color): NumberFormat.UInt16BE {" line339="        let nums, red, green, blue, clear: number;" line340="" line341="        if (identifiant == 0) {   // No sensor previously detected" line342="            pins.i2cWriteNumber(57, 132, NumberFormat.UInt8BE, false);" line343="            nums = pins.i2cReadNumber(57, NumberFormat.UInt8BE, false);" line344="            if (nums == 17) {     // Grove Sensor v1.3 detected" line345="                identifiant = 1;" line346="                pins.i2cWriteNumber(57, 129, NumberFormat.UInt8BE, false);" line347="                pins.i2cWriteNumber(57, 0, NumberFormat.UInt8BE, true);" line348="                pins.i2cWriteNumber(57, 135, NumberFormat.UInt8BE, false);" line349="                pins.i2cWriteNumber(57, 48, NumberFormat.UInt8BE, true);" line350="                pins.i2cWriteNumber(57, 128, NumberFormat.UInt8BE, false);" line351="                pins.i2cWriteNumber(57, 3, NumberFormat.UInt8BE, true);" line352="                basic.pause(50);" line353="            } else {" line354="                pins.i2cWriteNumber(41, 146, NumberFormat.UInt8BE, false);" line355="                nums = pins.i2cReadNumber(41, NumberFormat.UInt8BE, false);" line356="                if (nums == 68) {     // Grove Sensor v2 detected " line357="                    identifiant = 2;" line358="                    pins.i2cWriteNumber(41, 129, NumberFormat.UInt8BE, false);" line359="                    pins.i2cWriteNumber(41, 249, NumberFormat.UInt8BE, true);" line360="                    pins.i2cWriteNumber(41, 143, NumberFormat.UInt8BE, false);" line361="                    pins.i2cWriteNumber(41, 2, NumberFormat.UInt8BE, true);" line362="                    pins.i2cWriteNumber(41, 128, NumberFormat.UInt8BE, false);" line363="                    pins.i2cWriteNumber(41, 1, NumberFormat.UInt8BE, true);" line364="                    basic.pause(50);" line365="                    pins.i2cWriteNumber(41, 128, NumberFormat.UInt8BE, false);" line366="                    pins.i2cWriteNumber(41, 3, NumberFormat.UInt8BE, true);" line367="                    basic.pause(500);" line368="                }" line369="            }" line370="        }" line371="" line372="        if (identifiant == 1) {    // Grove Sensor v1.3 detected" line373="            switch (col) {" line374="                case Color.Red:" line375="                    pins.i2cWriteNumber(57, 210, NumberFormat.UInt8BE, false);" line376="                    red = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line377="                    return swap16(red)" line378="                    break" line379="                case Color.Green:" line380="                    pins.i2cWriteNumber(57, 208, NumberFormat.UInt8BE, false);" line381="                    green = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line382="                    return swap16(green)" line383="                    break" line384="                case Color.Blue:" line385="                    pins.i2cWriteNumber(57, 212, NumberFormat.UInt8BE, false);" line386="                    blue = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line387="                    return swap16(blue)" line388="                    break" line389="                case Color.Clear:" line390="                    pins.i2cWriteNumber(57, 214, NumberFormat.UInt8BE, false);" line391="                    clear = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line392="                    return swap16(clear)" line393="                    break" line394="            }" line395="        }" line396="        else if (identifiant == 2) {" line397="            switch (col) {" line398="                case Color.Red:" line399="                    pins.i2cWriteNumber(41, 150, NumberFormat.UInt8BE, false);" line400="                    red = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line401="                    return swap16(red)" line402="                    break" line403="                case Color.Green:" line404="                    pins.i2cWriteNumber(41, 152, NumberFormat.UInt8BE, false);" line405="                    green = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line406="                    return swap16(green)" line407="                    break" line408="                case Color.Blue:" line409="                    pins.i2cWriteNumber(41, 154, NumberFormat.UInt8BE, false);" line410="                    blue = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line411="                    return swap16(blue)" line412="                    break" line413="                case Color.Clear:" line414="                    pins.i2cWriteNumber(41, 148, NumberFormat.UInt8BE, false);" line415="                    clear = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line416="                    return swap16(clear)" line417="                    break" line418="            }" line419="            return 0;" line420="        }" line421="        return 0;" line422="    }" line423="" line424="    /**" line425="     * Detect and recognize the gestures from Grove - Gesture" line426="     * None:0" line427="     * Right:1" line428="     * Left:2" line429="     * Up:3" line430="     * Down:4" line431="     * Forward:5" line432="     * Backward:6" line433="     * Clockwise:7" line434="     * Anticlockwise:8" line435="     * Wave:9" line436="     */" line437="    //% blockId=hackbitGroveGesture" line438="    //% subcategory=Sensor  group=&quot;IIC&quot; color=#EA5532    " line439="    export function grove_gesture_reads(): number {" line440="        let data = 0, result = 0;" line441="" line442="        if (grovegestureinit == 0) {" line443="            paj7620Init();" line444="            basic.pause(200);" line445="            grovegestureinit = 1;" line446="        }" line447="" line448="        data = paj7620ReadReg(0x43);" line449="        switch (data) {" line450="            case 0x01:" line451="                result = GroveGesture.Right;" line452="                break;" line453="" line454="            case 0x02:" line455="                result = GroveGesture.Left;" line456="                break;" line457="" line458="            case 0x04:" line459="                result = GroveGesture.Up;" line460="                break;" line461="" line462="            case 0x08:" line463="                result = GroveGesture.Down;" line464="                break;" line465="" line466="            case 0x10:" line467="                result = GroveGesture.Forward;" line468="                break;" line469="" line470="            case 0x20:" line471="                result = GroveGesture.Backward;" line472="                break;" line473="" line474="            case 0x40:" line475="                result = GroveGesture.Clockwise;" line476="                break;" line477="" line478="            case 0x80:" line479="                result = GroveGesture.Anticlockwise;" line480="                break;" line481="" line482="            default:" line483="                data = paj7620ReadReg(0x44);" line484="                if (data == 0x01)" line485="                    result = GroveGesture.Wave;" line486="                break;" line487="        }" line488="        return result;" line489="    }" line490="" line491="    /**" line492="     * Create a new driver Grove - 4-Digit Display" line493="     * @param clkPin value of clk pin number" line494="     * @param dataPin value of data pin number" line495="     */" line496="    //% blockId=hackbit_tm1637_create block=&quot;4-Digit Display at|%clkPin|and|%dataPin&quot;" line497="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513    " line498="    //% weight=60" line499="    export function digit_createDisplay(clkPin: DigitalPin, dataPin: DigitalPin): void {" line500="        digit_buf = pins.createBuffer(4);" line501="        digit_clkPin = clkPin;" line502="        digit_dataPin = dataPin;" line503="        digit_brightnessLevel = 0;" line504="        digit_pointFlag = false;" line505="        digit_clear();" line506="    }" line507="" line508="    /**" line509="    * Show a 4 digits number on display" line510="    * @param dispData value of number" line511="    */" line512="    //% blockId=hackbit_tm1637_display_number block=&quot;show number|%dispData&quot;" line513="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513    " line514="    //% weight=59" line515="    export function digit_show(dispData: number) {" line516="        let compare_01: number = dispData % 100;" line517="        let compare_001: number = dispData % 1000;" line518="" line519="        if (dispData &lt; 10) {" line520="            digit_bit(dispData, 3);" line521="            digit_bit(0x7f, 2);" line522="            digit_bit(0x7f, 1);" line523="            digit_bit(0x7f, 0);" line524="        }" line525="        else if (dispData &lt; 100) {" line526="            digit_bit(dispData % 10, 3);" line527="            if (dispData &gt; 90) {" line528="                digit_bit(9, 2);" line529="            } else {" line530="                digit_bit(Math.floor(dispData / 10) % 10, 2);" line531="            }" line532="" line533="            digit_bit(0x7f, 1);" line534="            digit_bit(0x7f, 0);" line535="        }" line536="        else if (dispData &lt; 1000) {" line537="            digit_bit(dispData % 10, 3);" line538="            if (compare_01 &gt; 90) {" line539="                digit_bit(9, 2);" line540="            } else {" line541="                digit_bit(Math.floor(dispData / 10) % 10, 2);" line542="            }" line543="            if (compare_001 &gt; 900) {" line544="                digit_bit(9, 1);" line545="            } else {" line546="                digit_bit(Math.floor(dispData / 100) % 10, 1);" line547="            }" line548="            digit_bit(0x7f, 0);" line549="        }" line550="        else if (dispData &lt; 10000) {" line551="            digit_bit(dispData % 10, 3);" line552="            if (compare_01 &gt; 90) {" line553="                digit_bit(9, 2);" line554="            } else {" line555="                digit_bit(Math.floor(dispData / 10) % 10, 2);" line556="            }" line557="            if (compare_001 &gt; 900) {" line558="                digit_bit(9, 1);" line559="            } else {" line560="                digit_bit(Math.floor(dispData / 100) % 10, 1);" line561="            }" line562="            if (dispData &gt; 9000) {" line563="                digit_bit(9, 0);" line564="            } else {" line565="                digit_bit(Math.floor(dispData / 1000) % 10, 0);" line566="            }" line567="        }" line568="        else {" line569="            digit_bit(9, 3);" line570="            digit_bit(9, 2);" line571="            digit_bit(9, 1);" line572="            digit_bit(9, 0);" line573="        }" line574="    }" line575="" line576="    /**" line577="     * Set the brightness level of display at from 0 to 7" line578="     * @param level value of brightness light level" line579="     */" line580="    //% blockId=hackbit_tm1637_set_display_level block=&quot;brightness level to|%level&quot;" line581="    //% level.min=0 level.max=7" line582="    //% weight=58" line583="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513    " line584="    export function digit_set(level: number) {" line585="        digit_brightnessLevel = level;" line586="" line587="        digit_bit(digit_buf[0], 0x00);" line588="        digit_bit(digit_buf[1], 0x01);" line589="        digit_bit(digit_buf[2], 0x02);" line590="        digit_bit(digit_buf[3], 0x03);" line591="    }" line592="" line593="    /**" line594="     * Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display" line595="     * @param dispData value of number" line596="     * @param bitAddr value of bit number" line597="     */" line598="    //% blockId=grove_tm1637_display_bit block=&quot;%strip|show single number|%dispData|at digit|%bitAddr&quot;" line599="    //% dispData.min=0 dispData.max=9" line600="    //% bitAddr.min=0 bitAddr.max=3" line601="    //% advanced=false" line602="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513    " line603="    export function digit_bit(dispData: number, bitAddr: number) {" line604="        if ((dispData == 0x7f) || ((dispData &lt;= 9) &amp;&amp; (bitAddr &lt;= 3))) {" line605="            let segData = 0;" line606="" line607="            segData = digit_coding(dispData);" line608="            digit_start();" line609="            digit_writeByte(0x44);" line610="            digit_stop();" line611="            digit_start();" line612="            digit_writeByte(bitAddr | 0xc0);" line613="            digit_writeByte(segData);" line614="            digit_stop();" line615="            digit_start();" line616="            digit_writeByte(0x88 + digit_brightnessLevel);" line617="            digit_stop();" line618="" line619="            digit_buf[bitAddr] = dispData;" line620="        }" line621="    }" line622="" line623="    /**" line624="     * Turn on or off the colon point on Grove - 4-Digit Display" line625="     * @param pointEn value of point switch" line626="     */" line627="    //% blockId=grove_tm1637_display_point block=&quot;%strip|turn|%point|colon point&quot;" line628="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513    " line629="    //% advanced=false" line630="    export function digit_point(point: boolean) {" line631="        digit_pointFlag = point;" line632="" line633="        digit_bit(digit_buf[0], 0x00);" line634="        digit_bit(digit_buf[1], 0x01);" line635="        digit_bit(digit_buf[2], 0x02);" line636="        digit_bit(digit_buf[3], 0x03);" line637="    }" line638="" line639="    /**" line640="     * Clear the display" line641="     */" line642="    //% blockId=grove_tm1637_display_clear block=&quot;%strip|clear&quot;" line643="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513    " line644="    //% advanced=false" line645="    export function digit_clear() {" line646="        digit_bit(0x7f, 0x00);" line647="        digit_bit(0x7f, 0x01);" line648="        digit_bit(0x7f, 0x02);" line649="        digit_bit(0x7f, 0x03);" line650="    }" line651="" line652="    /**" line653="     * WiFi/IoT" line654="     * Initialize ESP8266 module and connect it to Wifi router" line655="     */" line656="    //% block=&quot;Initialize ESP8266|RX (Tx of micro:bit) %tx|TX (Rx of micro:bit) %rx|Baud rate %baudrate|Wifi SSID = %ssid|Wifi PW = %pw&quot;" line657="    //% tx.defl=SerialPin.P0" line658="    //% rx.defl=SerialPin.P1" line659="    //% ssid.defl=your_ssid" line660="    //% pw.defl=your_pw" line661="    //% subcategory=IoT group=&quot;ThingSpeak&quot; color=#00F5A9 icon=&quot;\uf1eb&quot;    " line662="    //% advanced=false" line663="" line664="    export function connectWifi(tx: SerialPin, rx: SerialPin, baudrate: BaudRate, ssid: string, pw: string) {" line665="        wifi_connected = false" line666="        thingspeak_connected = false" line667="        serial.redirect(" line668="            tx," line669="            rx," line670="            baudrate" line671="        )" line672="        sendAT(&quot;AT+RESTORE&quot;, 1000) // restore to factory settings" line673="        sendAT(&quot;AT+CWMODE=1&quot;) // set to STA mode" line674="        sendAT(&quot;AT+RST&quot;, 1000) // reset" line675="        sendAT(&quot;AT+CWJAP=\&quot;&quot; + ssid + &quot;\&quot;,\&quot;&quot; + pw + &quot;\&quot;&quot;, 0) // connect to Wifi router" line676="        wifi_connected = waitResponse()" line677="        basic.pause(100)" line678="    }" line679="" line680="    /**" line681="    * Connect to ThingSpeak and upload data. It would not upload anything if it failed to connect to Wifi or ThingSpeak." line682="    */" line683="    //% block=&quot;Upload data to ThingSpeak|URL/IP = %ip|Write API key = %write_api_key|Field 1 = %n1|Field 2 = %n2|Field 3 = %n3|Field 4 = %n4|Field 5 = %n5|Field 6 = %n6|Field 7 = %n7|Field 8 = %n8&quot;" line684="    //% ip.defl=api.thingspeak.com" line685="    //% write_api_key.defl=your_write_api_key" line686="    //% subcategory=IoT group=&quot;ThingSpeak&quot; color=#00F5A9 icon=&quot;\uf1eb&quot;    " line687="    //% advanced=false" line688="" line689="    export function connectThingSpeak(ip: string, write_api_key: string, n1: number, n2: number, n3: number, n4: number, n5: number, n6: number, n7: number, n8: number) {" line690="        if (wifi_connected &amp;&amp; write_api_key != &quot;&quot;) {" line691="            thingspeak_connected = false" line692="            sendAT(&quot;AT+CIPSTART=\&quot;TCP\&quot;,\&quot;&quot; + ip + &quot;\&quot;,80&quot;, 0) // connect to website server" line693="            thingspeak_connected = waitResponse()" line694="            basic.pause(100)" line695="            if (thingspeak_connected) {" line696="                last_upload_successful = false" line697="                let str: string = &quot;GET /update?api_key=&quot; + write_api_key + &quot;&amp;field1=&quot; + n1 + &quot;&amp;field2=&quot; + n2 + &quot;&amp;field3=&quot; + n3 + &quot;&amp;field4=&quot; + n4 + &quot;&amp;field5=&quot; + n5 + &quot;&amp;field6=&quot; + n6 + &quot;&amp;field7=&quot; + n7 + &quot;&amp;field8=&quot; + n8" line698="                sendAT(&quot;AT+CIPSEND=&quot; + (str.length + 2))" line699="                sendAT(str, 0) // upload data" line700="                last_upload_successful = waitResponse()" line701="                basic.pause(100)" line702="            }" line703="        }" line704="    }" line705="" line706="    /**" line707="    * Wait between uploads" line708="    */" line709="    //% block=&quot;Wait %delay ms&quot;" line710="    //% delay.min=0 delay.defl=5000" line711="    //% subcategory=IoT group=&quot;ThingSpeak&quot; color=#00F5A9 icon=&quot;\uf1eb&quot;    " line712="    //% advanced=false" line713="" line714="    export function wait(delay: number) {" line715="        if (delay &gt; 0) basic.pause(delay)" line716="    }" line717="" line718="    /**" line719="    * Check if ESP8266 successfully connected to Wifi" line720="    */" line721="    //% block=&quot;Wifi connected ?&quot;" line722="    //% subcategory=IoT group=&quot;ThingSpeak&quot; color=#00F5A9 icon=&quot;\uf1eb&quot;    " line723="    //% advanced=false" line724="" line725="    export function isWifiConnected() {" line726="        return wifi_connected" line727="    }" line728="" line729="    /**" line730="    * Check if ESP8266 successfully connected to ThingSpeak" line731="    */" line732="    //% block=&quot;ThingSpeak connected ?&quot;" line733="    //% subcategory=IoT group=&quot;ThingSpeak&quot; color=#00F5A9 icon=&quot;\uf1eb&quot;    " line734="    //% advanced=false" line735="" line736="    export function isThingSpeakConnected() {" line737="        return thingspeak_connected" line738="    }" line739="" line740="    /**" line741="    * Check if ESP8266 successfully uploaded data to ThingSpeak" line742="    */" line743="    //% block=&quot;Last data upload successful ?&quot;" line744="    //% subcategory=IoT group=&quot;ThingSpeak&quot; color=#00F5A9 icon=&quot;\uf1eb&quot;    " line745="    //% advanced=false" line746="" line747="    export function isLastUploadSuccessful() {" line748="        return last_upload_successful" line749="    }" line750="" line751="    /*" line752="     * Private functions" line753="     */" line754="    function swap16(val: NumberFormat.UInt16BE) {" line755="        return ((val &amp; 0xFF) &lt;&lt; 8)" line756="            | ((val &gt;&gt; 8) &amp; 0xFF);" line757="    }" line758="" line759="    function setDir(motor: Motors, dir: MotorDirection): void {" line760="        switch (motor) {" line761="            case Motors.Motor1: //gauche" line762="                _dir_left = dir;" line763="                break" line764="            case Motors.Motor2: //droit" line765="                _dir_right = dir;" line766="                break" line767="            case Motors.MotorFull: //droit" line768="                _dir_left = dir;" line769="                _dir_right = dir;" line770="                break" line771="        }" line772="    }" line773="" line774="    function setSpeed(motor: Motors, speed: number): void {" line775="        let corrected_speed = Math.min(Math.map(speed, 0, 100, 0, 1023), 1023);" line776="        switch (motor) {" line777="            case Motors.Motor1:" line778="                _speed_left = corrected_speed;" line779="                break" line780="            case Motors.Motor2:" line781="                _speed_right = corrected_speed;" line782="                break" line783="            case Motors.MotorFull:" line784="                _speed_left = corrected_speed;" line785="                _speed_right = corrected_speed;" line786="                break" line787="        }" line788="    }" line789="" line790="    function setMotors(): void {" line791="        if (_dir_right == 1) {" line792="            pins.digitalWritePin(DigitalPin.P15, 0);" line793="            pins.analogWritePin(AnalogPin.P16, _speed_right);" line794="        } else if (_dir_right == 2) {" line795="            pins.analogWritePin(AnalogPin.P15, _speed_right);" line796="            pins.digitalWritePin(DigitalPin.P16, 0);" line797="        } else {" line798="            pins.digitalWritePin(DigitalPin.P15, 0);" line799="            pins.digitalWritePin(DigitalPin.P16, 0);" line800="        }" line801="        if (_dir_left == 1) {" line802="            pins.digitalWritePin(DigitalPin.P13, 0);" line803="            pins.analogWritePin(AnalogPin.P14, _speed_left);" line804="        } else if (_dir_left == 2) {" line805="            pins.analogWritePin(AnalogPin.P13, _speed_left);" line806="            pins.digitalWritePin(DigitalPin.P14, 0);" line807="        } else {" line808="            pins.digitalWritePin(DigitalPin.P13, 0);" line809="            pins.digitalWritePin(DigitalPin.P14, 0);" line810="        }" line811="    }" line812="" line813="    function digit_writeByte(wrData: number) {" line814="        for (let i = 0; i &lt; 8; i++) {" line815="            pins.digitalWritePin(digit_clkPin, 0);" line816="            if (wrData &amp; 0x01) pins.digitalWritePin(digit_dataPin, 1);" line817="            else pins.digitalWritePin(digit_dataPin, 0);" line818="            wrData &gt;&gt;= 1;" line819="            pins.digitalWritePin(digit_clkPin, 1);" line820="        }" line821="" line822="        pins.digitalWritePin(digit_clkPin, 0); // Wait for ACK" line823="        pins.digitalWritePin(digit_dataPin, 1);" line824="        pins.digitalWritePin(digit_clkPin, 1);" line825="    }" line826="" line827="    function digit_start() {" line828="        pins.digitalWritePin(digit_clkPin, 1);" line829="        pins.digitalWritePin(digit_dataPin, 1);" line830="        pins.digitalWritePin(digit_dataPin, 0);" line831="        pins.digitalWritePin(digit_clkPin, 0);" line832="    }" line833="" line834="    function digit_stop() {" line835="        pins.digitalWritePin(digit_clkPin, 0);" line836="        pins.digitalWritePin(digit_dataPin, 0);" line837="        pins.digitalWritePin(digit_clkPin, 1);" line838="        pins.digitalWritePin(digit_dataPin, 1);" line839="    }" line840="" line841="    function digit_coding(dispData: number): number {" line842="        let pointData = 0;" line843="" line844="        if (digit_pointFlag == true) pointData = 0x80;" line845="        else if (digit_pointFlag == false) pointData = 0;" line846="" line847="        if (dispData == 0x7f) dispData = 0x00 + pointData;" line848="        else dispData = TubeTab[dispData] + pointData;" line849="" line850="        return dispData;" line851="    }" line852="" line853="    function paj7620WriteReg(addr: number, cmd: number) {" line854="        let buf: Buffer = pins.createBuffer(2);" line855="" line856="        buf[0] = addr;" line857="        buf[1] = cmd;" line858="" line859="        pins.i2cWriteBuffer(0x73, buf, false);" line860="    }" line861="" line862="    function paj7620ReadReg(addr: number): number {" line863="        let buf2: Buffer = pins.createBuffer(1);" line864="" line865="        buf2[0] = addr;" line866="" line867="        pins.i2cWriteBuffer(0x73, buf2, false);" line868="" line869="        buf2 = pins.i2cReadBuffer(0x73, 1, false);" line870="" line871="        return buf2[0];" line872="    }" line873="" line874="    function paj7620SelectBank(bank: number) {" line875="        if (bank == 0) paj7620WriteReg(0xEF, 0);" line876="        else if (bank == 1) paj7620WriteReg(0xEF, 1);" line877="    }" line878="" line879="    function paj7620Init() {" line880="        let temp = 0;" line881="" line882="        paj7620SelectBank(0);" line883="" line884="        temp = paj7620ReadReg(0);" line885="        if (temp == 0x20) {" line886="            for (let j = 0; j &lt; 438; j += 2) {" line887="                paj7620WriteReg(initRegisterArray[j], initRegisterArray[j + 1]);" line888="            }" line889="        }" line890="" line891="        paj7620SelectBank(0);" line892="    }" line893="" line894="    /**" line895="     * Iot ThingSpeak" line896="    **/" line897="" line898="    // write AT command with CR+LF ending" line899="    function sendAT(command: string, wait: number = 100) {" line900="        serial.writeString(command + &quot;\u000D\u000A&quot;)" line901="        basic.pause(wait)" line902="    }" line903="" line904="    // wait for certain response from ESP8266" line905="    function waitResponse(): boolean {" line906="        let serial_str: string = &quot;&quot;" line907="        let result2: boolean = false" line908="        let time: number = input.runningTime()" line909="        while (true) {" line910="            serial_str += serial.readString()" line911="            if (serial_str.length &gt; 200) serial_str = serial_str.substr(serial_str.length - 200)" line912="            if (serial_str.includes(&quot;OK&quot;) || serial_str.includes(&quot;ALREADY CONNECTED&quot;)) {" line913="                result2 = true" line914="                break" line915="            } else if (serial_str.includes(&quot;ERROR&quot;) || serial_str.includes(&quot;SEND FAIL&quot;)) {" line916="                break" line917="            }" line918="            if (input.runningTime() - time &gt; 30000) break" line919="        }" line920="        return result2" line921="    }" line922="    /**" line923="     * end Iot ThingSpeak" line924="    **/" line925="" line926="" line927="}" numlines="928"></mutation></block></statement></block></xml>