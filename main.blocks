<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="MPs;c:T#)+Xof#hW_gfn" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="}GY`m-rwbu1_pwpQ@!Fu" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace hackbit {" line1="    const initRegisterArray: number[] = [" line2="        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17," line3="        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F," line4="        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14," line5="        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27," line6="        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01," line7="        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00," line8="        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20," line9="        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37," line10="        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A," line11="        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F," line12="        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30," line13="        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19," line14="        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04," line15="        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00," line16="        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00," line17="        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F," line18="        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07," line19="        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01," line20="        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F," line21="        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01," line22="        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40," line23="        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E," line24="        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00," line25="        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08," line26="        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00," line27="        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01," line28="        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01," line29="        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01" line30="    ];" line31="" line32="    export enum MotorDirection {" line33="        //% block=&quot;Forward&quot;" line34="        Forward = 1," line35="        //% block=&quot;Backward&quot;" line36="        Reverse = 2," line37="        //% block=&quot;Stop&quot;" line38="        Stop = 0" line39="    }" line40="" line41="    export enum OnOff {" line42="        //% block=&quot;On&quot;" line43="        On = 1," line44="        //% block=&quot;Off&quot;" line45="        Off = 0" line46="    }" line47="" line48="    export enum BP {" line49="        //% block=&quot;BPA&quot;" line50="        BPA = 1," line51="        //% block=&quot;BPB&quot;" line52="        BPB = 0" line53="    }" line54="" line55="    export enum RobotDirection {" line56="        //% block=&quot;Forward&quot;" line57="        Forward," line58="        //% block=&quot;Backward&quot;" line59="        Reverse," line60="        //% block=&quot;Turn Right&quot;" line61="        TurnRigh," line62="        //% block=&quot;Turn Left&quot;" line63="        TurnLef," line64="        //% block=&quot;Rotate Right&quot;" line65="        RotateRight," line66="        //% block=&quot;Rotate Left&quot;" line67="        RotateLef," line68="        //% block=&quot;Stop&quot;" line69="        Stop" line70="    }" line71="" line72="    export enum Motors {" line73="        //%blockId=A4_Robot_Driver_motor_one" line74="        //% block=&quot;left motor&quot;" line75="        Motor1," line76="        //%blockId=A4_Robot_Driver_motor_two" line77="        //% block=&quot;right motor&quot;" line78="        Motor2," line79="        //%blockId=A4_Robot_Driver_motor_full" line80="        //% block=&quot;left and right motor&quot;" line81="        MotorFull" line82="    }" line83="" line84="    export enum Color {" line85="        //% block=&quot;Red&quot;" line86="        Red," line87="        //% block=&quot;Green&quot;" line88="        Green," line89="        //% block=&quot;Blue&quot;" line90="        Blue," line91="        //% block=&quot;Clear&quot;" line92="        Clear" line93="    }" line94="" line95="    export enum GroveGesture {" line96="        //% block=None" line97="        None = 0," line98="        //% block=Right" line99="        Right = 1," line100="        //% block=Left" line101="        Left = 2," line102="        //% block=Up" line103="        Up = 3," line104="        //% block=Down" line105="        Down = 4," line106="        //% block=Forward" line107="        Forward = 5," line108="        //% block=Backward" line109="        Backward = 6," line110="        //% block=Clockwise" line111="        Clockwise = 7," line112="        //% block=Anticlockwise" line113="        Anticlockwise = 8," line114="        //% block=Wave" line115="        Wave = 9" line116="    }" line117="" line118="    export let _speed_left = 700; //1023 = 100% speed" line119="    export let _speed_right = 700;" line120="    export let _dir_right = 1; //0 = stop, 1 = forward, 2 = backward" line121="    export let _dir_left = 1;" line122="    export let identifiant = 0;" line123="    export let grovegestureinit = 0;" line124="" line125="    let TubeTab: number[] = [" line126="        0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07," line127="        0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71" line128="    ];" line129="" line130="    export let digit_clkPin: DigitalPin;" line131="    export let digit_dataPin: DigitalPin;" line132="    export let digit_brightnessLevel: number;" line133="    export let digit_pointFlag: boolean;" line134="    export let digit_buf: Buffer;" line135="" line136="    /**" line137="     * Control Robot speed [0-100%]" line138="     * @param dir direction" line139="     * @param speed speed in %" line140="     */" line141="    //% blockId=RobotDriverRobotMove" line142="    //% block=&quot;move %dir| speed %speed&quot;" line143="    //% speed.min=0 speed.max=100" line144="    //% parts=&quot;RobotDriver&quot; advanced=false" line145="    //% speed.defl=75" line146="    //% subcategory=Motors  group=&quot;Motors DC&quot; color=#EA5532" line147="    export function robotMove(dir: RobotDirection, speed: number): void {" line148="        setSpeed(Motors.MotorFull, speed);" line149="        switch (dir) {" line150="            case RobotDirection.Forward:" line151="                setDir(Motors.MotorFull, MotorDirection.Forward);" line152="                break" line153="            case RobotDirection.Reverse:" line154="                setDir(Motors.MotorFull, MotorDirection.Reverse);" line155="                break" line156="            case RobotDirection.RotateRight:" line157="                setDir(Motors.Motor1, MotorDirection.Forward);" line158="                setDir(Motors.Motor2, MotorDirection.Reverse);" line159="                break" line160="            case RobotDirection.RotateLef:" line161="                setDir(Motors.Motor1, MotorDirection.Reverse);" line162="                setDir(Motors.Motor2, MotorDirection.Forward);" line163="                break" line164="            case RobotDirection.TurnRigh:" line165="                setDir(Motors.Motor1, MotorDirection.Forward);" line166="                setDir(Motors.Motor2, MotorDirection.Stop);" line167="                break" line168="            case RobotDirection.TurnLef:" line169="                setDir(Motors.Motor1, MotorDirection.Stop);" line170="                setDir(Motors.Motor2, MotorDirection.Forward);" line171="                break" line172="            case RobotDirection.Stop:" line173="                setDir(Motors.MotorFull, MotorDirection.Stop);" line174="                break" line175="        }" line176="        setMotors();" line177="    }" line178="" line179="" line180="    /**" line181="     * Change the motor direction" line182="     * @param motor selection (left, right)" line183="     * @param dir rotation direction (forward, backward)" line184="     */" line185="    //% blockId=RobotDrivermotordir" line186="    //% block=&quot;set %motor| %dir&quot;" line187="    //% parts=&quot;RobotDriver&quot; advanced=false" line188="    //% motor.defl=MotorFull" line189="    //% subcategory=Motors  group=&quot;Motors DC&quot; color=#EA5532" line190="    export function motorDir(motor: Motors, dir: MotorDirection): void {" line191="        setDir(motor, dir);" line192="        setMotors();" line193="    }" line194="" line195="    /**" line196="     * Change the motor speed [0-100%]" line197="     * @param motor selection (left, right)" line198="     * @param new speed (0-100%)" line199="     */" line200="" line201="    //% blockId=robotdrivermotorspeed" line202="    //% block=&quot;set %motor| to %speed %&quot;" line203="    //% speed.min=0 speed.max=100" line204="    //% parts=&quot;A4_Robot_Driver&quot; advanced=false" line205="    //% speed.defl=75" line206="    //% subcategory=Motors  group=&quot;Motors DC&quot; color=#EA5532" line207="    export function motorSpeed(motor: Motors, speed: number): void {" line208="        setSpeed(motor, speed);" line209="        setMotors();" line210="    }" line211="" line212="    /**" line213="     * Stop both motors" line214="    */" line215="    //% blockId=RobotDriverRobotStop" line216="    //% block=&quot;stop both motors&quot;" line217="    //% subcategory=Motors  group=&quot;Motors DC&quot; color=#EA5532" line218="    export function motorStop(): void {" line219="        robotMove(hackbit.RobotDirection.Stop, 0)" line220="    }" line221="" line222="    /**" line223="     * Set the servomotor position [0-180deg]" line224="     * @param pin servomotor pin (right or left)" line225="     */" line226="    //% blockId=RobotDriverservodegrees" line227="    //% block=&quot;servomotor |%pin| to |%angle| degree&quot;" line228="    //% parts=&quot;RobotDriver&quot; advanced=false" line229="    //% angle.shadow=&quot;protractorPicker&quot;" line230="    //% angle.defl=90" line231="    //% subcategory=Motors  group=&quot;Servo Motors&quot; color=#EA5532" line232="    export function setServoMotor(pin: AnalogPin, angle: number): void {" line233="        pins.servoWritePin(pin, Math.constrain(angle, 0, 180));" line234="    }" line235="" line236="    /**" line237="     * get distance from ultrasonic range sensor [cm]" line238="     * @param pin Input pin" line239="     */" line240="    //% blockId=RobotDriverultrasonic_cm " line241="    //% block=&quot;ultrasonic distance|%name| (cm)&quot;" line242="    //% name.fieldEditor=&quot;gridpicker&quot; " line243="    //% name.fieldOptions.columns=5" line244="    //% name.fieldOptions.tooltips=&quot;false&quot;" line245="    //% name.fieldOptions.width=&quot;0&quot;" line246="    //% subcategory=Sensors  group=&quot;Digital&quot; color=#EA5532" line247="    export function measureDistanceCentimeter(name: DigitalPin): number {" line248="        let duration = 0;" line249="        let distance = 0;" line250="        pins.digitalWritePin(name, 0); //make sure pin is low" line251="        control.waitMicros(2);" line252="        pins.digitalWritePin(name, 1); //send echo" line253="        control.waitMicros(20);" line254="        pins.digitalWritePin(name, 0);" line255="        duration = pins.pulseIn(name, PulseValue.High, 50000); // Max duration 50 ms - receive echo" line256="        distance = duration * 153 / 29 / 2 / 100;" line257="        Math.constrain(distance, 0, 500);" line258="        return distance;" line259="    }" line260="" line261="    /**" line262="     * Get line sensor state [0-1]" line263="    */" line264="    //% blockId=hackbitLineRead" line265="    //% block=&quot;line sensor |%pin|&quot;" line266="    //% subcategory=Sensors  group=&quot;Digital&quot; color=#EA5532        " line267="    export function detectline(pin: DigitalPin): number {" line268="        return pins.digitalReadPin(pin);" line269="    }" line270="" line271="    /**" line272="     * Get analog potentiometer value [0-1023]" line273="    */" line274="    //% blockId=hackbitPotargRead" line275="    //% block=&quot;potentiometer |%pin|&quot;" line276="    //% subcategory=Input  group=&quot;Analog&quot; color=#EA5532" line277="    export function potarValue(pin: AnalogPin): number {" line278="        return pins.analogReadPin(pin);" line279="    }" line280="" line281="    /**" line282="     * Get collision sensor state [0-1]" line283="    */" line284="    //% blockId=hackbitCollisionRead" line285="    //% block=&quot;collision sensor |%pin|&quot;" line286="    //% subcategory=Input  group=&quot;Digital&quot; color=#EA5532    " line287="    export function collisionSensor(pin: BP): boolean {" line288="        if (pin)" line289="            return input.buttonIsPressed(Button.A);" line290="        return input.buttonIsPressed(Button.B);" line291="    }" line292="" line293="    /**" line294="     * Get button state [0-1]" line295="    */" line296="    //% blockId=hackbitButtonRead" line297="    //% block=&quot;button |%pin|&quot;" line298="    //% subcategory=Input  group=&quot;Digital&quot; color=#EA5532    " line299="    export function buttonState(pin: DigitalPin): number {" line300="        return pins.digitalReadPin(pin);" line301="    }" line302="" line303="    /**" line304="     * Set Led state" line305="    */" line306="    //% blockId=hackbitLedSet" line307="    //% block=&quot;led |%pin| to |%state|&quot;" line308="    //% state.min=0 state.max=1" line309="    //% subcategory=Display  group=&quot;Digital&quot; color=#EA5532    " line310="    export function ledState(pin: DigitalPin, state: OnOff): void {" line311="        pins.digitalWritePin(pin, state);" line312="    }" line313="" line314="    /**" line315="    * Get color from I2C Grove Color Sensor v1.3 or v2.0" line316="    * [0;65534]" line317="    * @param selected color" line318="    */" line319="    //% blockId=&quot;grovecolorsensorgetcolor&quot; " line320="    //% block=&quot;color %Color&quot;" line321="    //% block.loc.fr=&quot;Valeur de la couleur %Color du capteur de couleur grove&quot;" line322="    //% jsdoc = &quot;Grab sensor value from grove color sensor&quot;" line323="    //% subcategory=Sensors  group=&quot;IIC&quot; color=#EA5532    " line324="" line325="    export function color(col: Color): NumberFormat.UInt16BE {" line326="        let nums, red, green, blue, clear: number;" line327="" line328="        if (identifiant == 0) {   // No sensor previously detected" line329="            pins.i2cWriteNumber(57, 132, NumberFormat.UInt8BE, false);" line330="            nums = pins.i2cReadNumber(57, NumberFormat.UInt8BE, false);" line331="            if (nums == 17) {     // Grove Sensor v1.3 detected" line332="                identifiant = 1;" line333="                pins.i2cWriteNumber(57, 129, NumberFormat.UInt8BE, false);" line334="                pins.i2cWriteNumber(57, 0, NumberFormat.UInt8BE, true);" line335="                pins.i2cWriteNumber(57, 135, NumberFormat.UInt8BE, false);" line336="                pins.i2cWriteNumber(57, 48, NumberFormat.UInt8BE, true);" line337="                pins.i2cWriteNumber(57, 128, NumberFormat.UInt8BE, false);" line338="                pins.i2cWriteNumber(57, 3, NumberFormat.UInt8BE, true);" line339="                basic.pause(50);" line340="            } else {" line341="                pins.i2cWriteNumber(41, 146, NumberFormat.UInt8BE, false);" line342="                nums = pins.i2cReadNumber(41, NumberFormat.UInt8BE, false);" line343="                if (nums == 68) {     // Grove Sensor v2 detected " line344="                    identifiant = 2;" line345="                    pins.i2cWriteNumber(41, 129, NumberFormat.UInt8BE, false);" line346="                    pins.i2cWriteNumber(41, 249, NumberFormat.UInt8BE, true);" line347="                    pins.i2cWriteNumber(41, 143, NumberFormat.UInt8BE, false);" line348="                    pins.i2cWriteNumber(41, 2, NumberFormat.UInt8BE, true);" line349="                    pins.i2cWriteNumber(41, 128, NumberFormat.UInt8BE, false);" line350="                    pins.i2cWriteNumber(41, 1, NumberFormat.UInt8BE, true);" line351="                    basic.pause(50);" line352="                    pins.i2cWriteNumber(41, 128, NumberFormat.UInt8BE, false);" line353="                    pins.i2cWriteNumber(41, 3, NumberFormat.UInt8BE, true);" line354="                    basic.pause(500);" line355="                }" line356="            }" line357="        }" line358="" line359="        if (identifiant == 1) {    // Grove Sensor v1.3 detected" line360="            switch (col) {" line361="                case Color.Red:" line362="                    pins.i2cWriteNumber(57, 210, NumberFormat.UInt8BE, false);" line363="                    red = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line364="                    return swap16(red)" line365="                    break" line366="                case Color.Green:" line367="                    pins.i2cWriteNumber(57, 208, NumberFormat.UInt8BE, false);" line368="                    green = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line369="                    return swap16(green)" line370="                    break" line371="                case Color.Blue:" line372="                    pins.i2cWriteNumber(57, 212, NumberFormat.UInt8BE, false);" line373="                    blue = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line374="                    return swap16(blue)" line375="                    break" line376="                case Color.Clear:" line377="                    pins.i2cWriteNumber(57, 214, NumberFormat.UInt8BE, false);" line378="                    clear = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line379="                    return swap16(clear)" line380="                    break" line381="            }" line382="        }" line383="        else if (identifiant == 2) {" line384="            switch (col) {" line385="                case Color.Red:" line386="                    pins.i2cWriteNumber(41, 150, NumberFormat.UInt8BE, false);" line387="                    red = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line388="                    return swap16(red)" line389="                    break" line390="                case Color.Green:" line391="                    pins.i2cWriteNumber(41, 152, NumberFormat.UInt8BE, false);" line392="                    green = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line393="                    return swap16(green)" line394="                    break" line395="                case Color.Blue:" line396="                    pins.i2cWriteNumber(41, 154, NumberFormat.UInt8BE, false);" line397="                    blue = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line398="                    return swap16(blue)" line399="                    break" line400="                case Color.Clear:" line401="                    pins.i2cWriteNumber(41, 148, NumberFormat.UInt8BE, false);" line402="                    clear = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line403="                    return swap16(clear)" line404="                    break" line405="            }" line406="            return 0;" line407="        }" line408="        return 0;" line409="    }" line410="" line411="    /**" line412="     * Detect and recognize the gestures from Grove - Gesture" line413="     * None:0" line414="     * Right:1" line415="     * Left:2" line416="     * Up:3" line417="     * Down:4" line418="     * Forward:5" line419="     * Backward:6" line420="     * Clockwise:7" line421="     * Anticlockwise:8" line422="     * Wave:9" line423="     */" line424="    //% blockId=hackbitGroveGesture" line425="    //% subcategory=Sensors  group=&quot;IIC&quot; color=#EA5532    " line426="    export function grove_gesture_reads(): number {" line427="        let data = 0, result = 0;" line428="" line429="        if (grovegestureinit == 0) {" line430="            paj7620Init();" line431="            basic.pause(200);" line432="            grovegestureinit = 1;" line433="        }" line434="" line435="        data = paj7620ReadReg(0x43);" line436="        switch (data) {" line437="            case 0x01:" line438="                result = GroveGesture.Right;" line439="                break;" line440="" line441="            case 0x02:" line442="                result = GroveGesture.Left;" line443="                break;" line444="" line445="            case 0x04:" line446="                result = GroveGesture.Up;" line447="                break;" line448="" line449="            case 0x08:" line450="                result = GroveGesture.Down;" line451="                break;" line452="" line453="            case 0x10:" line454="                result = GroveGesture.Forward;" line455="                break;" line456="" line457="            case 0x20:" line458="                result = GroveGesture.Backward;" line459="                break;" line460="" line461="            case 0x40:" line462="                result = GroveGesture.Clockwise;" line463="                break;" line464="" line465="            case 0x80:" line466="                result = GroveGesture.Anticlockwise;" line467="                break;" line468="" line469="            default:" line470="                data = paj7620ReadReg(0x44);" line471="                if (data == 0x01)" line472="                    result = GroveGesture.Wave;" line473="                break;" line474="        }" line475="        return result;" line476="    }" line477="" line478="    /**" line479="     * Create a new driver Grove - 4-Digit Display" line480="     * @param clkPin value of clk pin number" line481="     * @param dataPin value of data pin number" line482="     */" line483="    //% blockId=hackbit_tm1637_create block=&quot;4-Digit Display at|%clkPin|and|%dataPin&quot;" line484="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#EA5532    " line485="    //% weight=60" line486="    export function digit_createDisplay(clkPin: DigitalPin, dataPin: DigitalPin): void {" line487="        digit_buf = pins.createBuffer(4);" line488="        digit_clkPin = clkPin;" line489="        digit_dataPin = dataPin;" line490="        digit_brightnessLevel = 0;" line491="        digit_pointFlag = false;" line492="        digit_clear();" line493="    }" line494="" line495="    /**" line496="    * Show a 4 digits number on display" line497="    * @param dispData value of number" line498="    */" line499="    //% blockId=hackbit_tm1637_display_number block=&quot;show number|%dispData&quot;" line500="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#EA5532    " line501="    //% weight=59" line502="    export function digit_show(dispData: number) {" line503="        let compare_01: number = dispData % 100;" line504="        let compare_001: number = dispData % 1000;" line505="" line506="        if (dispData &lt; 10) {" line507="            digit_bit(dispData, 3);" line508="            digit_bit(0x7f, 2);" line509="            digit_bit(0x7f, 1);" line510="            digit_bit(0x7f, 0);" line511="        }" line512="        else if (dispData &lt; 100) {" line513="            digit_bit(dispData % 10, 3);" line514="            if (dispData &gt; 90) {" line515="                digit_bit(9, 2);" line516="            } else {" line517="                digit_bit(Math.floor(dispData / 10) % 10, 2);" line518="            }" line519="" line520="            digit_bit(0x7f, 1);" line521="            digit_bit(0x7f, 0);" line522="        }" line523="        else if (dispData &lt; 1000) {" line524="            digit_bit(dispData % 10, 3);" line525="            if (compare_01 &gt; 90) {" line526="                digit_bit(9, 2);" line527="            } else {" line528="                digit_bit(Math.floor(dispData / 10) % 10, 2);" line529="            }" line530="            if (compare_001 &gt; 900) {" line531="                digit_bit(9, 1);" line532="            } else {" line533="                digit_bit(Math.floor(dispData / 100) % 10, 1);" line534="            }" line535="            digit_bit(0x7f, 0);" line536="        }" line537="        else if (dispData &lt; 10000) {" line538="            digit_bit(dispData % 10, 3);" line539="            if (compare_01 &gt; 90) {" line540="                digit_bit(9, 2);" line541="            } else {" line542="                digit_bit(Math.floor(dispData / 10) % 10, 2);" line543="            }" line544="            if (compare_001 &gt; 900) {" line545="                digit_bit(9, 1);" line546="            } else {" line547="                digit_bit(Math.floor(dispData / 100) % 10, 1);" line548="            }" line549="            if (dispData &gt; 9000) {" line550="                digit_bit(9, 0);" line551="            } else {" line552="                digit_bit(Math.floor(dispData / 1000) % 10, 0);" line553="            }" line554="        }" line555="        else {" line556="            digit_bit(9, 3);" line557="            digit_bit(9, 2);" line558="            digit_bit(9, 1);" line559="            digit_bit(9, 0);" line560="        }" line561="    }" line562="" line563="    /**" line564="     * Set the brightness level of display at from 0 to 7" line565="     * @param level value of brightness light level" line566="     */" line567="    //% blockId=hackbit_tm1637_set_display_level block=&quot;brightness level to|%level&quot;" line568="    //% level.min=0 level.max=7" line569="    //% weight=58" line570="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#EA5532    " line571="    export function digit_set(level: number) {" line572="        digit_brightnessLevel = level;" line573="" line574="        digit_bit(digit_buf[0], 0x00);" line575="        digit_bit(digit_buf[1], 0x01);" line576="        digit_bit(digit_buf[2], 0x02);" line577="        digit_bit(digit_buf[3], 0x03);" line578="    }" line579="" line580="    /**" line581="     * Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display" line582="     * @param dispData value of number" line583="     * @param bitAddr value of bit number" line584="     */" line585="    //% blockId=grove_tm1637_display_bit block=&quot;%strip|show single number|%dispData|at digit|%bitAddr&quot;" line586="    //% dispData.min=0 dispData.max=9" line587="    //% bitAddr.min=0 bitAddr.max=3" line588="    //% advanced=false" line589="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#EA5532    " line590="    export function digit_bit(dispData: number, bitAddr: number) {" line591="        if ((dispData == 0x7f) || ((dispData &lt;= 9) &amp;&amp; (bitAddr &lt;= 3))) {" line592="            let segData = 0;" line593="" line594="            segData = digit_coding(dispData);" line595="            digit_start();" line596="            digit_writeByte(0x44);" line597="            digit_stop();" line598="            digit_start();" line599="            digit_writeByte(bitAddr | 0xc0);" line600="            digit_writeByte(segData);" line601="            digit_stop();" line602="            digit_start();" line603="            digit_writeByte(0x88 + digit_brightnessLevel);" line604="            digit_stop();" line605="" line606="            digit_buf[bitAddr] = dispData;" line607="        }" line608="    }" line609="" line610="    /**" line611="     * Turn on or off the colon point on Grove - 4-Digit Display" line612="     * @param pointEn value of point switch" line613="     */" line614="    //% blockId=grove_tm1637_display_point block=&quot;%strip|turn|%point|colon point&quot;" line615="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#EA5532    " line616="    //% advanced=false" line617="    export function digit_point(point: boolean) {" line618="        digit_pointFlag = point;" line619="" line620="        digit_bit(digit_buf[0], 0x00);" line621="        digit_bit(digit_buf[1], 0x01);" line622="        digit_bit(digit_buf[2], 0x02);" line623="        digit_bit(digit_buf[3], 0x03);" line624="    }" line625="" line626="    /**" line627="     * Clear the display" line628="     */" line629="    //% blockId=grove_tm1637_display_clear block=&quot;%strip|clear&quot;" line630="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#EA5532    " line631="    //% advanced=false" line632="    export function digit_clear() {" line633="        digit_bit(0x7f, 0x00);" line634="        digit_bit(0x7f, 0x01);" line635="        digit_bit(0x7f, 0x02);" line636="        digit_bit(0x7f, 0x03);" line637="    }" line638="" line639="    /*" line640="     * Private functions" line641="     */" line642="    function swap16(val: NumberFormat.UInt16BE) {" line643="        return ((val &amp; 0xFF) &lt;&lt; 8)" line644="            | ((val &gt;&gt; 8) &amp; 0xFF);" line645="    }" line646="" line647="    function setDir(motor: Motors, dir: MotorDirection): void {" line648="        switch (motor) {" line649="            case Motors.Motor1: //gauche" line650="                _dir_left = dir;" line651="                break" line652="            case Motors.Motor2: //droit" line653="                _dir_right = dir;" line654="                break" line655="            case Motors.MotorFull: //droit" line656="                _dir_left = dir;" line657="                _dir_right = dir;" line658="                break" line659="        }" line660="    }" line661="" line662="    function setSpeed(motor: Motors, speed: number): void {" line663="        let corrected_speed = Math.min(Math.map(speed, 0, 100, 0, 1023), 1023);" line664="        switch (motor) {" line665="            case Motors.Motor1:" line666="                _speed_left = corrected_speed;" line667="                break" line668="            case Motors.Motor2:" line669="                _speed_right = corrected_speed;" line670="                break" line671="            case Motors.MotorFull:" line672="                _speed_left = corrected_speed;" line673="                _speed_right = corrected_speed;" line674="                break" line675="        }" line676="    }" line677="" line678="    function setMotors(): void {" line679="        if (_dir_right == 1) {" line680="            pins.digitalWritePin(DigitalPin.P15, 0);" line681="            pins.analogWritePin(AnalogPin.P16, _speed_right);" line682="        } else if (_dir_right == 2) {" line683="            pins.analogWritePin(AnalogPin.P15, _speed_right);" line684="            pins.digitalWritePin(DigitalPin.P16, 0);" line685="        } else {" line686="            pins.digitalWritePin(DigitalPin.P15, 0);" line687="            pins.digitalWritePin(DigitalPin.P16, 0);" line688="        }" line689="        if (_dir_left == 1) {" line690="            pins.digitalWritePin(DigitalPin.P13, 0);" line691="            pins.analogWritePin(AnalogPin.P14, _speed_left);" line692="        } else if (_dir_left == 2) {" line693="            pins.analogWritePin(AnalogPin.P13, _speed_left);" line694="            pins.digitalWritePin(DigitalPin.P14, 0);" line695="        } else {" line696="            pins.digitalWritePin(DigitalPin.P13, 0);" line697="            pins.digitalWritePin(DigitalPin.P14, 0);" line698="        }" line699="    }" line700="" line701="    function digit_writeByte(wrData: number) {" line702="        for (let i = 0; i &lt; 8; i++) {" line703="            pins.digitalWritePin(digit_clkPin, 0);" line704="            if (wrData &amp; 0x01) pins.digitalWritePin(digit_dataPin, 1);" line705="            else pins.digitalWritePin(digit_dataPin, 0);" line706="            wrData &gt;&gt;= 1;" line707="            pins.digitalWritePin(digit_clkPin, 1);" line708="        }" line709="" line710="        pins.digitalWritePin(digit_clkPin, 0); // Wait for ACK" line711="        pins.digitalWritePin(digit_dataPin, 1);" line712="        pins.digitalWritePin(digit_clkPin, 1);" line713="    }" line714="" line715="    function digit_start() {" line716="        pins.digitalWritePin(digit_clkPin, 1);" line717="        pins.digitalWritePin(digit_dataPin, 1);" line718="        pins.digitalWritePin(digit_dataPin, 0);" line719="        pins.digitalWritePin(digit_clkPin, 0);" line720="    }" line721="" line722="    function digit_stop() {" line723="        pins.digitalWritePin(digit_clkPin, 0);" line724="        pins.digitalWritePin(digit_dataPin, 0);" line725="        pins.digitalWritePin(digit_clkPin, 1);" line726="        pins.digitalWritePin(digit_dataPin, 1);" line727="    }" line728="" line729="    function digit_coding(dispData: number): number {" line730="        let pointData = 0;" line731="" line732="        if (digit_pointFlag == true) pointData = 0x80;" line733="        else if (digit_pointFlag == false) pointData = 0;" line734="" line735="        if (dispData == 0x7f) dispData = 0x00 + pointData;" line736="        else dispData = TubeTab[dispData] + pointData;" line737="" line738="        return dispData;" line739="    }" line740="" line741="    function paj7620WriteReg(addr: number, cmd: number) {" line742="        let buf: Buffer = pins.createBuffer(2);" line743="" line744="        buf[0] = addr;" line745="        buf[1] = cmd;" line746="" line747="        pins.i2cWriteBuffer(0x73, buf, false);" line748="    }" line749="" line750="    function paj7620ReadReg(addr: number): number {" line751="        let buf2: Buffer = pins.createBuffer(1);" line752="" line753="        buf2[0] = addr;" line754="" line755="        pins.i2cWriteBuffer(0x73, buf2, false);" line756="" line757="        buf2 = pins.i2cReadBuffer(0x73, 1, false);" line758="" line759="        return buf2[0];" line760="    }" line761="" line762="    function paj7620SelectBank(bank: number) {" line763="        if (bank == 0) paj7620WriteReg(0xEF, 0);" line764="        else if (bank == 1) paj7620WriteReg(0xEF, 1);" line765="    }" line766="" line767="    function paj7620Init() {" line768="        let temp = 0;" line769="" line770="        paj7620SelectBank(0);" line771="" line772="        temp = paj7620ReadReg(0);" line773="        if (temp == 0x20) {" line774="            for (let j = 0; j &lt; 438; j += 2) {" line775="                paj7620WriteReg(initRegisterArray[j], initRegisterArray[j + 1]);" line776="            }" line777="        }" line778="" line779="        paj7620SelectBank(0);" line780="    }" line781="}" numlines="782"></mutation></block></statement></block></xml>