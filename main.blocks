<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="qsx0D,_F_9g^)%]Obe.(" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="=S_U:^QHMl4Nl*_J,@^h" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace hackbit {" line1="    const initRegisterArray: number[] = [" line2="        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17," line3="        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F," line4="        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14," line5="        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27," line6="        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01," line7="        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00," line8="        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20," line9="        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37," line10="        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A," line11="        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F," line12="        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30," line13="        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19," line14="        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04," line15="        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00," line16="        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00," line17="        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F," line18="        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07," line19="        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01," line20="        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F," line21="        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01," line22="        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40," line23="        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E," line24="        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00," line25="        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08," line26="        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00," line27="        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01," line28="        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01," line29="        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01" line30="    ];" line31="" line32="/**" line33="* Sempre adicionar ao inicio de main.ts antes de submeter" line34="**/" line35="" line36="/**" line37=" * Library for Grove micro:bit project board https://www.hackids.com.br" line38="*/" line39="/** " line40="* //% weight=10 color=#FF1344 icon=&quot;\uf135&quot;" line41="**/" line42="" line43="    export enum MotorDirection {" line44="        //% block=&quot;Forward&quot;" line45="        Forward = 1," line46="        //% block=&quot;Backward&quot;" line47="        Reverse = 2," line48="        //% block=&quot;Stop&quot;" line49="        Stop = 0" line50="    }" line51="" line52="    export enum OnOff {" line53="        //% block=&quot;On&quot;" line54="        On = 1," line55="        //% block=&quot;Off&quot;" line56="        Off = 0" line57="    }" line58="" line59="    export enum BP {" line60="        //% block=&quot;BPA&quot;" line61="        BPA = 1," line62="        //% block=&quot;BPB&quot;" line63="        BPB = 0" line64="    }" line65="" line66="    export enum RobotDirection {" line67="        //% block=&quot;Forward&quot;" line68="        Forward," line69="        //% block=&quot;Backward&quot;" line70="        Reverse," line71="        //% block=&quot;Turn Right&quot;" line72="        TurnRigh," line73="        //% block=&quot;Turn Left&quot;" line74="        TurnLef," line75="        //% block=&quot;Rotate Right&quot;" line76="        RotateRight," line77="        //% block=&quot;Rotate Left&quot;" line78="        RotateLef," line79="        //% block=&quot;Stop&quot;" line80="        Stop" line81="    }" line82="" line83="    export enum Motors {" line84="        //%blockId=A4_Robot_Driver_motor_one" line85="        //% block=&quot;left motor&quot;" line86="        Motor1," line87="        //%blockId=A4_Robot_Driver_motor_two" line88="        //% block=&quot;right motor&quot;" line89="        Motor2," line90="        //%blockId=A4_Robot_Driver_motor_full" line91="        //% block=&quot;left and right motor&quot;" line92="        MotorFull" line93="    }" line94="" line95="    export enum Color {" line96="        //% block=&quot;Red&quot;" line97="        Red," line98="        //% block=&quot;Green&quot;" line99="        Green," line100="        //% block=&quot;Blue&quot;" line101="        Blue," line102="        //% block=&quot;Clear&quot;" line103="        Clear" line104="    }" line105="" line106="    export enum GroveGesture {" line107="        //% block=None" line108="        None = 0," line109="        //% block=Right" line110="        Right = 1," line111="        //% block=Left" line112="        Left = 2," line113="        //% block=Up" line114="        Up = 3," line115="        //% block=Down" line116="        Down = 4," line117="        //% block=Forward" line118="        Forward = 5," line119="        //% block=Backward" line120="        Backward = 6," line121="        //% block=Clockwise" line122="        Clockwise = 7," line123="        //% block=Anticlockwise" line124="        Anticlockwise = 8," line125="        //% block=Wave" line126="        Wave = 9" line127="    }" line128="" line129="    export let _speed_left = 700; //1023 = 100% speed" line130="    export let _speed_right = 700;" line131="    export let _dir_right = 1; //0 = stop, 1 = forward, 2 = backward" line132="    export let _dir_left = 1;" line133="    export let identifiant = 0;" line134="    export let grovegestureinit = 0;" line135="" line136="    let TubeTab: number[] = [" line137="        0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07," line138="        0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71" line139="    ];" line140="" line141="    export let digit_clkPin: DigitalPin;" line142="    export let digit_dataPin: DigitalPin;" line143="    export let digit_brightnessLevel: number;" line144="    export let digit_pointFlag: boolean;" line145="    export let digit_buf: Buffer;" line146="" line147="" line148="    /**" line149="     * Control Robot speed [0-100%]" line150="     * @param dir direction" line151="     * @param speed speed in %" line152="     */" line153="    //% blockId=RobotDriverRobotMove" line154="    //% block=&quot;move %dir| speed %speed&quot;" line155="    //% speed.min=0 speed.max=100" line156="    //% parts=&quot;RobotDriver&quot; advanced=false" line157="    //% speed.defl=75" line158="    //% subcategory=Motor  group=&quot;Motors DC&quot; color=#FF1344 icon=&quot;\uf1eb&quot;" line159="    export function robotMove(dir: RobotDirection, speed: number): void {" line160="        setSpeed(Motors.MotorFull, speed);" line161="        switch (dir) {" line162="            case RobotDirection.Forward:" line163="                setDir(Motors.MotorFull, MotorDirection.Forward);" line164="                break" line165="            case RobotDirection.Reverse:" line166="                setDir(Motors.MotorFull, MotorDirection.Reverse);" line167="                break" line168="            case RobotDirection.RotateRight:" line169="                setDir(Motors.Motor1, MotorDirection.Forward);" line170="                setDir(Motors.Motor2, MotorDirection.Reverse);" line171="                break" line172="            case RobotDirection.RotateLef:" line173="                setDir(Motors.Motor1, MotorDirection.Reverse);" line174="                setDir(Motors.Motor2, MotorDirection.Forward);" line175="                break" line176="            case RobotDirection.TurnRigh:" line177="                setDir(Motors.Motor1, MotorDirection.Forward);" line178="                setDir(Motors.Motor2, MotorDirection.Stop);" line179="                break" line180="            case RobotDirection.TurnLef:" line181="                setDir(Motors.Motor1, MotorDirection.Stop);" line182="                setDir(Motors.Motor2, MotorDirection.Forward);" line183="                break" line184="            case RobotDirection.Stop:" line185="                setDir(Motors.MotorFull, MotorDirection.Stop);" line186="                break" line187="        }" line188="        setMotors();" line189="    }" line190="" line191="" line192="    /**" line193="     * Change the motor direction" line194="     * @param motor selection (left, right)" line195="     * @param dir rotation direction (forward, backward)" line196="     */" line197="    //% blockId=RobotDrivermotordir" line198="    //% block=&quot;set %motor| %dir&quot;" line199="    //% parts=&quot;RobotDriver&quot; advanced=false" line200="    //% motor.defl=MotorFull" line201="    //% subcategory=Motor  group=&quot;Motors DC&quot; color=#FF1344 icon=&quot;\uf1eb&quot;" line202="    export function motorDir(motor: Motors, dir: MotorDirection): void {" line203="        setDir(motor, dir);" line204="        setMotors();" line205="    }" line206="" line207="    /**" line208="     * Change the motor speed [0-100%]" line209="     * @param motor selection (left, right)" line210="     * @param new speed (0-100%)" line211="     */" line212="" line213="    //% blockId=robotdrivermotorspeed" line214="    //% block=&quot;set %motor| to %speed %&quot;" line215="    //% speed.min=0 speed.max=100" line216="    //% parts=&quot;A4_Robot_Driver&quot; advanced=false" line217="    //% speed.defl=75" line218="    //% subcategory=Motor  group=&quot;Motors DC&quot; color=#FF1344 icon=&quot;\uf1eb&quot;" line219="    export function motorSpeed(motor: Motors, speed: number): void {" line220="        setSpeed(motor, speed);" line221="        setMotors();" line222="    }" line223="" line224="    /**" line225="     * Stop both motors" line226="    */" line227="    //% blockId=RobotDriverRobotStop" line228="    //% block=&quot;stop both motors&quot;" line229="    //% subcategory=Motor  group=&quot;Motors DC&quot; color=#FF1344 icon=&quot;\uf1eb&quot;" line230="    export function motorStop(): void {" line231="        robotMove(hackbit.RobotDirection.Stop, 0)" line232="    }" line233="" line234="    /**" line235="     * Set the servomotor position [0-180deg]" line236="     * @param pin servomotor pin (right or left)" line237="     */" line238="    //% blockId=RobotDriverservodegrees" line239="    //% block=&quot;servomotor |%pin| to |%angle| degree&quot;" line240="    //% parts=&quot;RobotDriver&quot; advanced=false" line241="    //% angle.shadow=&quot;protractorPicker&quot;" line242="    //% angle.defl=90" line243="    //% subcategory=Motor  group=&quot;Servo Motors&quot; color=#FF1344 icon=&quot;\uf1eb&quot;" line244="    export function setServoMotor(pin: AnalogPin, angle: number): void {" line245="        pins.servoWritePin(pin, Math.constrain(angle, 0, 180));" line246="    }" line247="" line248="    /**" line249="     * get distance from ultrasonic range sensor [cm]" line250="     * @param pin Input pin" line251="     */" line252="    //% blockId=RobotDriverultrasonic_cm " line253="    //% block=&quot;ultrasonic distance|%name| (cm)&quot;" line254="    //% name.fieldEditor=&quot;gridpicker&quot; " line255="    //% name.fieldOptions.columns=5" line256="    //% name.fieldOptions.tooltips=&quot;false&quot;" line257="    //% name.fieldOptions.width=&quot;0&quot;" line258="    //% subcategory=Sensor  group=&quot;Digital&quot; color=#1371FF icon=&quot;\uf1eb&quot;" line259="    export function measureDistanceCentimeter(name: DigitalPin): number {" line260="        let duration = 0;" line261="        let distance = 0;" line262="        pins.digitalWritePin(name, 0); //make sure pin is low" line263="        control.waitMicros(2);" line264="        pins.digitalWritePin(name, 1); //send echo" line265="        control.waitMicros(20);" line266="        pins.digitalWritePin(name, 0);" line267="        duration = pins.pulseIn(name, PulseValue.High, 50000); // Max duration 50 ms - receive echo" line268="        distance = duration * 153 / 29 / 2 / 100;" line269="        Math.constrain(distance, 0, 500);" line270="        return distance;" line271="    }" line272="" line273="    /**" line274="     * Get line sensor state [0-1]" line275="    */" line276="    //% blockId=hackbitLineRead" line277="    //% block=&quot;line sensor |%pin|&quot;" line278="    //% subcategory=Sensor  group=&quot;Digital&quot; color=#1371FF icon=&quot;\uf1eb&quot;        " line279="    export function detectline(pin: DigitalPin): number {" line280="        return pins.digitalReadPin(pin);" line281="    }" line282="" line283="    /**" line284="     * Get analog potentiometer value [0-1023]" line285="    */" line286="    //% blockId=hackbitPotargRead" line287="    //% block=&quot;potentiometer |%pin|&quot;" line288="    //% subcategory=Input  group=&quot;Analog&quot; color=#851DE8 icon=&quot;\uf1eb&quot;" line289="    export function potarValue(pin: AnalogPin): number {" line290="        return pins.analogReadPin(pin);" line291="    }" line292="" line293="    /**" line294="     * Get collision sensor state [0-1]" line295="    */" line296="    //% blockId=hackbitCollisionRead" line297="    //% block=&quot;collision sensor |%pin|&quot;" line298="    //% subcategory=Input  group=&quot;Digital&quot; color=#851DE8 icon=&quot;\uf1eb&quot;    " line299="    export function collisionSensor(pin: BP): boolean {" line300="        if (pin)" line301="            return input.buttonIsPressed(Button.A);" line302="        return input.buttonIsPressed(Button.B);" line303="    }" line304="" line305="    /**" line306="     * Get button state [0-1]" line307="    */" line308="    //% blockId=hackbitButtonRead" line309="    //% block=&quot;button |%pin|&quot;" line310="    //% subcategory=Input  group=&quot;Digital&quot; color=#851DE8 icon=&quot;\uf1eb&quot;    " line311="    export function buttonState(pin: DigitalPin): number {" line312="        return pins.digitalReadPin(pin);" line313="    }" line314="" line315="    /**" line316="     * Set Led state" line317="    */" line318="    //% blockId=hackbitLedSet" line319="    //% block=&quot;led |%pin| to |%state|&quot;" line320="    //% state.min=0 state.max=1" line321="    //% subcategory=Display  group=&quot;Digital&quot; color=#F57513 icon=&quot;\uf1eb&quot;    " line322="    export function ledState(pin: DigitalPin, state: OnOff): void {" line323="        pins.digitalWritePin(pin, state);" line324="    }" line325="" line326="    /**" line327="    * Get color from I2C Grove Color Sensor v1.3 or v2.0" line328="    * [0;65534]" line329="    * @param selected color" line330="    */" line331="    //% blockId=&quot;grovecolorsensorgetcolor&quot; " line332="    //% block=&quot;color %Color&quot;" line333="    //% block.loc.fr=&quot;Valeur de la couleur %Color du capteur de couleur grove&quot;" line334="    //% jsdoc = &quot;Grab sensor value from grove color sensor&quot;" line335="    //% subcategory=Sensor  group=&quot;IIC&quot; color=#EA5532 icon=&quot;\uf1eb&quot;    " line336="" line337="    export function color(col: Color): NumberFormat.UInt16BE {" line338="        let nums, red, green, blue, clear: number;" line339="" line340="        if (identifiant == 0) {   // No sensor previously detected" line341="            pins.i2cWriteNumber(57, 132, NumberFormat.UInt8BE, false);" line342="            nums = pins.i2cReadNumber(57, NumberFormat.UInt8BE, false);" line343="            if (nums == 17) {     // Grove Sensor v1.3 detected" line344="                identifiant = 1;" line345="                pins.i2cWriteNumber(57, 129, NumberFormat.UInt8BE, false);" line346="                pins.i2cWriteNumber(57, 0, NumberFormat.UInt8BE, true);" line347="                pins.i2cWriteNumber(57, 135, NumberFormat.UInt8BE, false);" line348="                pins.i2cWriteNumber(57, 48, NumberFormat.UInt8BE, true);" line349="                pins.i2cWriteNumber(57, 128, NumberFormat.UInt8BE, false);" line350="                pins.i2cWriteNumber(57, 3, NumberFormat.UInt8BE, true);" line351="                basic.pause(50);" line352="            } else {" line353="                pins.i2cWriteNumber(41, 146, NumberFormat.UInt8BE, false);" line354="                nums = pins.i2cReadNumber(41, NumberFormat.UInt8BE, false);" line355="                if (nums == 68) {     // Grove Sensor v2 detected " line356="                    identifiant = 2;" line357="                    pins.i2cWriteNumber(41, 129, NumberFormat.UInt8BE, false);" line358="                    pins.i2cWriteNumber(41, 249, NumberFormat.UInt8BE, true);" line359="                    pins.i2cWriteNumber(41, 143, NumberFormat.UInt8BE, false);" line360="                    pins.i2cWriteNumber(41, 2, NumberFormat.UInt8BE, true);" line361="                    pins.i2cWriteNumber(41, 128, NumberFormat.UInt8BE, false);" line362="                    pins.i2cWriteNumber(41, 1, NumberFormat.UInt8BE, true);" line363="                    basic.pause(50);" line364="                    pins.i2cWriteNumber(41, 128, NumberFormat.UInt8BE, false);" line365="                    pins.i2cWriteNumber(41, 3, NumberFormat.UInt8BE, true);" line366="                    basic.pause(500);" line367="                }" line368="            }" line369="        }" line370="" line371="        if (identifiant == 1) {    // Grove Sensor v1.3 detected" line372="            switch (col) {" line373="                case Color.Red:" line374="                    pins.i2cWriteNumber(57, 210, NumberFormat.UInt8BE, false);" line375="                    red = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line376="                    return swap16(red)" line377="                    break" line378="                case Color.Green:" line379="                    pins.i2cWriteNumber(57, 208, NumberFormat.UInt8BE, false);" line380="                    green = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line381="                    return swap16(green)" line382="                    break" line383="                case Color.Blue:" line384="                    pins.i2cWriteNumber(57, 212, NumberFormat.UInt8BE, false);" line385="                    blue = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line386="                    return swap16(blue)" line387="                    break" line388="                case Color.Clear:" line389="                    pins.i2cWriteNumber(57, 214, NumberFormat.UInt8BE, false);" line390="                    clear = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line391="                    return swap16(clear)" line392="                    break" line393="            }" line394="        }" line395="        else if (identifiant == 2) {" line396="            switch (col) {" line397="                case Color.Red:" line398="                    pins.i2cWriteNumber(41, 150, NumberFormat.UInt8BE, false);" line399="                    red = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line400="                    return swap16(red)" line401="                    break" line402="                case Color.Green:" line403="                    pins.i2cWriteNumber(41, 152, NumberFormat.UInt8BE, false);" line404="                    green = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line405="                    return swap16(green)" line406="                    break" line407="                case Color.Blue:" line408="                    pins.i2cWriteNumber(41, 154, NumberFormat.UInt8BE, false);" line409="                    blue = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line410="                    return swap16(blue)" line411="                    break" line412="                case Color.Clear:" line413="                    pins.i2cWriteNumber(41, 148, NumberFormat.UInt8BE, false);" line414="                    clear = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line415="                    return swap16(clear)" line416="                    break" line417="            }" line418="            return 0;" line419="        }" line420="        return 0;" line421="    }" line422="" line423="    /**" line424="     * Detect and recognize the gestures from Grove - Gesture" line425="     * None:0" line426="     * Right:1" line427="     * Left:2" line428="     * Up:3" line429="     * Down:4" line430="     * Forward:5" line431="     * Backward:6" line432="     * Clockwise:7" line433="     * Anticlockwise:8" line434="     * Wave:9" line435="     */" line436="    //% blockId=hackbitGroveGesture" line437="    //% subcategory=Sensor  group=&quot;IIC&quot; color=#EA5532 icon=&quot;\uf1eb&quot;    " line438="    export function grove_gesture_reads(): number {" line439="        let data = 0, result = 0;" line440="" line441="        if (grovegestureinit == 0) {" line442="            paj7620Init();" line443="            basic.pause(200);" line444="            grovegestureinit = 1;" line445="        }" line446="" line447="        data = paj7620ReadReg(0x43);" line448="        switch (data) {" line449="            case 0x01:" line450="                result = GroveGesture.Right;" line451="                break;" line452="" line453="            case 0x02:" line454="                result = GroveGesture.Left;" line455="                break;" line456="" line457="            case 0x04:" line458="                result = GroveGesture.Up;" line459="                break;" line460="" line461="            case 0x08:" line462="                result = GroveGesture.Down;" line463="                break;" line464="" line465="            case 0x10:" line466="                result = GroveGesture.Forward;" line467="                break;" line468="" line469="            case 0x20:" line470="                result = GroveGesture.Backward;" line471="                break;" line472="" line473="            case 0x40:" line474="                result = GroveGesture.Clockwise;" line475="                break;" line476="" line477="            case 0x80:" line478="                result = GroveGesture.Anticlockwise;" line479="                break;" line480="" line481="            default:" line482="                data = paj7620ReadReg(0x44);" line483="                if (data == 0x01)" line484="                    result = GroveGesture.Wave;" line485="                break;" line486="        }" line487="        return result;" line488="    }" line489="" line490="    /**" line491="     * Create a new driver Grove - 4-Digit Display" line492="     * @param clkPin value of clk pin number" line493="     * @param dataPin value of data pin number" line494="     */" line495="    //% blockId=hackbit_tm1637_create block=&quot;4-Digit Display at|%clkPin|and|%dataPin&quot;" line496="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513 icon=&quot;\uf1eb&quot;    " line497="    //% weight=60" line498="    export function digit_createDisplay(clkPin: DigitalPin, dataPin: DigitalPin): void {" line499="        digit_buf = pins.createBuffer(4);" line500="        digit_clkPin = clkPin;" line501="        digit_dataPin = dataPin;" line502="        digit_brightnessLevel = 0;" line503="        digit_pointFlag = false;" line504="        digit_clear();" line505="    }" line506="" line507="    /**" line508="    * Show a 4 digits number on display" line509="    * @param dispData value of number" line510="    */" line511="    //% blockId=hackbit_tm1637_display_number block=&quot;show number|%dispData&quot;" line512="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513 icon=&quot;\uf1eb&quot;    " line513="    //% weight=59" line514="    export function digit_show(dispData: number) {" line515="        let compare_01: number = dispData % 100;" line516="        let compare_001: number = dispData % 1000;" line517="" line518="        if (dispData &lt; 10) {" line519="            digit_bit(dispData, 3);" line520="            digit_bit(0x7f, 2);" line521="            digit_bit(0x7f, 1);" line522="            digit_bit(0x7f, 0);" line523="        }" line524="        else if (dispData &lt; 100) {" line525="            digit_bit(dispData % 10, 3);" line526="            if (dispData &gt; 90) {" line527="                digit_bit(9, 2);" line528="            } else {" line529="                digit_bit(Math.floor(dispData / 10) % 10, 2);" line530="            }" line531="" line532="            digit_bit(0x7f, 1);" line533="            digit_bit(0x7f, 0);" line534="        }" line535="        else if (dispData &lt; 1000) {" line536="            digit_bit(dispData % 10, 3);" line537="            if (compare_01 &gt; 90) {" line538="                digit_bit(9, 2);" line539="            } else {" line540="                digit_bit(Math.floor(dispData / 10) % 10, 2);" line541="            }" line542="            if (compare_001 &gt; 900) {" line543="                digit_bit(9, 1);" line544="            } else {" line545="                digit_bit(Math.floor(dispData / 100) % 10, 1);" line546="            }" line547="            digit_bit(0x7f, 0);" line548="        }" line549="        else if (dispData &lt; 10000) {" line550="            digit_bit(dispData % 10, 3);" line551="            if (compare_01 &gt; 90) {" line552="                digit_bit(9, 2);" line553="            } else {" line554="                digit_bit(Math.floor(dispData / 10) % 10, 2);" line555="            }" line556="            if (compare_001 &gt; 900) {" line557="                digit_bit(9, 1);" line558="            } else {" line559="                digit_bit(Math.floor(dispData / 100) % 10, 1);" line560="            }" line561="            if (dispData &gt; 9000) {" line562="                digit_bit(9, 0);" line563="            } else {" line564="                digit_bit(Math.floor(dispData / 1000) % 10, 0);" line565="            }" line566="        }" line567="        else {" line568="            digit_bit(9, 3);" line569="            digit_bit(9, 2);" line570="            digit_bit(9, 1);" line571="            digit_bit(9, 0);" line572="        }" line573="    }" line574="" line575="    /**" line576="     * Set the brightness level of display at from 0 to 7" line577="     * @param level value of brightness light level" line578="     */" line579="    //% blockId=hackbit_tm1637_set_display_level block=&quot;brightness level to|%level&quot;" line580="    //% level.min=0 level.max=7" line581="    //% weight=58" line582="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513 icon=&quot;\uf1eb&quot;     " line583="    export function digit_set(level: number) {" line584="        digit_brightnessLevel = level;" line585="" line586="        digit_bit(digit_buf[0], 0x00);" line587="        digit_bit(digit_buf[1], 0x01);" line588="        digit_bit(digit_buf[2], 0x02);" line589="        digit_bit(digit_buf[3], 0x03);" line590="    }" line591="" line592="    /**" line593="     * Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display" line594="     * @param dispData value of number" line595="     * @param bitAddr value of bit number" line596="     */" line597="    //% blockId=grove_tm1637_display_bit block=&quot;%strip|show single number|%dispData|at digit|%bitAddr&quot;" line598="    //% dispData.min=0 dispData.max=9" line599="    //% bitAddr.min=0 bitAddr.max=3" line600="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513 icon=&quot;\uf1eb&quot;    " line601="    //% advanced=false" line602="    export function digit_bit(dispData: number, bitAddr: number) {" line603="        if ((dispData == 0x7f) || ((dispData &lt;= 9) &amp;&amp; (bitAddr &lt;= 3))) {" line604="            let segData = 0;" line605="" line606="            segData = digit_coding(dispData);" line607="            digit_start();" line608="            digit_writeByte(0x44);" line609="            digit_stop();" line610="            digit_start();" line611="            digit_writeByte(bitAddr | 0xc0);" line612="            digit_writeByte(segData);" line613="            digit_stop();" line614="            digit_start();" line615="            digit_writeByte(0x88 + digit_brightnessLevel);" line616="            digit_stop();" line617="" line618="            digit_buf[bitAddr] = dispData;" line619="        }" line620="    }" line621="" line622="    /**" line623="     * Turn on or off the colon point on Grove - 4-Digit Display" line624="     * @param pointEn value of point switch" line625="     */" line626="    //% blockId=grove_tm1637_display_point block=&quot;%strip|turn|%point|colon point&quot;" line627="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513 icon=&quot;\uf1eb&quot;   " line628="    //% advanced=false" line629="    export function digit_point(point: boolean) {" line630="        digit_pointFlag = point;" line631="" line632="        digit_bit(digit_buf[0], 0x00);" line633="        digit_bit(digit_buf[1], 0x01);" line634="        digit_bit(digit_buf[2], 0x02);" line635="        digit_bit(digit_buf[3], 0x03);" line636="    }" line637="" line638="    /**" line639="     * Clear the display" line640="     */" line641="    //% blockId=grove_tm1637_display_clear block=&quot;%strip|clear&quot;" line642="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513 icon=&quot;\uf1eb&quot;    " line643="    //% advanced=false" line644="    export function digit_clear() {" line645="        digit_bit(0x7f, 0x00);" line646="        digit_bit(0x7f, 0x01);" line647="        digit_bit(0x7f, 0x02);" line648="        digit_bit(0x7f, 0x03);" line649="    }" line650="" line651="    /*" line652="     * Private functions" line653="     */" line654="    function swap16(val: NumberFormat.UInt16BE) {" line655="        return ((val &amp; 0xFF) &lt;&lt; 8)" line656="            | ((val &gt;&gt; 8) &amp; 0xFF);" line657="    }" line658="" line659="    function setDir(motor: Motors, dir: MotorDirection): void {" line660="        switch (motor) {" line661="            case Motors.Motor1: //gauche" line662="                _dir_left = dir;" line663="                break" line664="            case Motors.Motor2: //droit" line665="                _dir_right = dir;" line666="                break" line667="            case Motors.MotorFull: //droit" line668="                _dir_left = dir;" line669="                _dir_right = dir;" line670="                break" line671="        }" line672="    }" line673="" line674="    function setSpeed(motor: Motors, speed: number): void {" line675="        let corrected_speed = Math.min(Math.map(speed, 0, 100, 0, 1023), 1023);" line676="        switch (motor) {" line677="            case Motors.Motor1:" line678="                _speed_left = corrected_speed;" line679="                break" line680="            case Motors.Motor2:" line681="                _speed_right = corrected_speed;" line682="                break" line683="            case Motors.MotorFull:" line684="                _speed_left = corrected_speed;" line685="                _speed_right = corrected_speed;" line686="                break" line687="        }" line688="    }" line689="" line690="    function setMotors(): void {" line691="        if (_dir_right == 1) {" line692="            pins.digitalWritePin(DigitalPin.P15, 0);" line693="            pins.analogWritePin(AnalogPin.P16, _speed_right);" line694="        } else if (_dir_right == 2) {" line695="            pins.analogWritePin(AnalogPin.P15, _speed_right);" line696="            pins.digitalWritePin(DigitalPin.P16, 0);" line697="        } else {" line698="            pins.digitalWritePin(DigitalPin.P15, 0);" line699="            pins.digitalWritePin(DigitalPin.P16, 0);" line700="        }" line701="        if (_dir_left == 1) {" line702="            pins.digitalWritePin(DigitalPin.P13, 0);" line703="            pins.analogWritePin(AnalogPin.P14, _speed_left);" line704="        } else if (_dir_left == 2) {" line705="            pins.analogWritePin(AnalogPin.P13, _speed_left);" line706="            pins.digitalWritePin(DigitalPin.P14, 0);" line707="        } else {" line708="            pins.digitalWritePin(DigitalPin.P13, 0);" line709="            pins.digitalWritePin(DigitalPin.P14, 0);" line710="        }" line711="    }" line712="" line713="    function digit_writeByte(wrData: number) {" line714="        for (let i = 0; i &lt; 8; i++) {" line715="            pins.digitalWritePin(digit_clkPin, 0);" line716="            if (wrData &amp; 0x01) pins.digitalWritePin(digit_dataPin, 1);" line717="            else pins.digitalWritePin(digit_dataPin, 0);" line718="            wrData &gt;&gt;= 1;" line719="            pins.digitalWritePin(digit_clkPin, 1);" line720="        }" line721="" line722="        pins.digitalWritePin(digit_clkPin, 0); // Wait for ACK" line723="        pins.digitalWritePin(digit_dataPin, 1);" line724="        pins.digitalWritePin(digit_clkPin, 1);" line725="    }" line726="" line727="    function digit_start() {" line728="        pins.digitalWritePin(digit_clkPin, 1);" line729="        pins.digitalWritePin(digit_dataPin, 1);" line730="        pins.digitalWritePin(digit_dataPin, 0);" line731="        pins.digitalWritePin(digit_clkPin, 0);" line732="    }" line733="" line734="    function digit_stop() {" line735="        pins.digitalWritePin(digit_clkPin, 0);" line736="        pins.digitalWritePin(digit_dataPin, 0);" line737="        pins.digitalWritePin(digit_clkPin, 1);" line738="        pins.digitalWritePin(digit_dataPin, 1);" line739="    }" line740="" line741="    function digit_coding(dispData: number): number {" line742="        let pointData = 0;" line743="" line744="        if (digit_pointFlag == true) pointData = 0x80;" line745="        else if (digit_pointFlag == false) pointData = 0;" line746="" line747="        if (dispData == 0x7f) dispData = 0x00 + pointData;" line748="        else dispData = TubeTab[dispData] + pointData;" line749="" line750="        return dispData;" line751="    }" line752="" line753="    function paj7620WriteReg(addr: number, cmd: number) {" line754="        let buf: Buffer = pins.createBuffer(2);" line755="" line756="        buf[0] = addr;" line757="        buf[1] = cmd;" line758="" line759="        pins.i2cWriteBuffer(0x73, buf, false);" line760="    }" line761="" line762="    function paj7620ReadReg(addr: number): number {" line763="        let buf2: Buffer = pins.createBuffer(1);" line764="" line765="        buf2[0] = addr;" line766="" line767="        pins.i2cWriteBuffer(0x73, buf2, false);" line768="" line769="        buf2 = pins.i2cReadBuffer(0x73, 1, false);" line770="" line771="        return buf2[0];" line772="    }" line773="" line774="    function paj7620SelectBank(bank: number) {" line775="        if (bank == 0) paj7620WriteReg(0xEF, 0);" line776="        else if (bank == 1) paj7620WriteReg(0xEF, 1);" line777="    }" line778="" line779="    function paj7620Init() {" line780="        let temp = 0;" line781="" line782="        paj7620SelectBank(0);" line783="" line784="        temp = paj7620ReadReg(0);" line785="        if (temp == 0x20) {" line786="            for (let j = 0; j &lt; 438; j += 2) {" line787="                paj7620WriteReg(initRegisterArray[j], initRegisterArray[j + 1]);" line788="            }" line789="        }" line790="" line791="        paj7620SelectBank(0);" line792="    }" line793="   " line794="" line795="}" numlines="796"></mutation></block></statement></block></xml>