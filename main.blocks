<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="L`usnHRABclqfr_b_Yhx" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="yRL2z@t#/BBh$!WX-HFc" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace hackbit {" line1="    const initRegisterArray: number[] = [" line2="        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17," line3="        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F," line4="        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14," line5="        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27," line6="        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01," line7="        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00," line8="        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20," line9="        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37," line10="        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A," line11="        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F," line12="        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30," line13="        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19," line14="        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04," line15="        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00," line16="        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00," line17="        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F," line18="        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07," line19="        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01," line20="        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F," line21="        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01," line22="        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40," line23="        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E," line24="        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00," line25="        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08," line26="        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00," line27="        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01," line28="        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01," line29="        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01" line30="    ];" line31="" line32="/**" line33="* Sempre adicionar ao inicio de main.ts antes de submeter" line34="**/" line35="" line36="/**" line37=" * Library for Grove micro:bit project board https://www.hackids.com.br" line38="*/" line39="/** " line40="* //% weight=10 color=#FF1344 icon=&quot;\uf135&quot;" line41="**/" line42="" line43="    export enum MotorDirection {" line44="        //% block=&quot;Forward&quot;" line45="        Forward = 1," line46="        //% block=&quot;Backward&quot;" line47="        Reverse = 2," line48="        //% block=&quot;Stop&quot;" line49="        Stop = 0" line50="    }" line51="" line52="    export enum OnOff {" line53="        //% block=&quot;On&quot;" line54="        On = 1," line55="        //% block=&quot;Off&quot;" line56="        Off = 0" line57="    }" line58="" line59="    export enum BP {" line60="        //% block=&quot;BPA&quot;" line61="        BPA = 1," line62="        //% block=&quot;BPB&quot;" line63="        BPB = 0" line64="    }" line65="" line66="    export enum RobotDirection {" line67="        //% block=&quot;Forward&quot;" line68="        Forward," line69="        //% block=&quot;Backward&quot;" line70="        Reverse," line71="        //% block=&quot;Turn Right&quot;" line72="        TurnRigh," line73="        //% block=&quot;Turn Left&quot;" line74="        TurnLef," line75="        //% block=&quot;Rotate Right&quot;" line76="        RotateRight," line77="        //% block=&quot;Rotate Left&quot;" line78="        RotateLef," line79="        //% block=&quot;Stop&quot;" line80="        Stop" line81="    }" line82="" line83="    export enum Motors {" line84="        //%blockId=A4_Robot_Driver_motor_one" line85="        //% block=&quot;left motor&quot;" line86="        Motor1," line87="        //%blockId=A4_Robot_Driver_motor_two" line88="        //% block=&quot;right motor&quot;" line89="        Motor2," line90="        //%blockId=A4_Robot_Driver_motor_full" line91="        //% block=&quot;left and right motor&quot;" line92="        MotorFull" line93="    }" line94="" line95="    export enum Color {" line96="        //% block=&quot;Red&quot;" line97="        Red," line98="        //% block=&quot;Green&quot;" line99="        Green," line100="        //% block=&quot;Blue&quot;" line101="        Blue," line102="        //% block=&quot;Clear&quot;" line103="        Clear" line104="    }" line105="" line106="    export enum GroveGesture {" line107="        //% block=None" line108="        None = 0," line109="        //% block=Right" line110="        Right = 1," line111="        //% block=Left" line112="        Left = 2," line113="        //% block=Up" line114="        Up = 3," line115="        //% block=Down" line116="        Down = 4," line117="        //% block=Forward" line118="        Forward = 5," line119="        //% block=Backward" line120="        Backward = 6," line121="        //% block=Clockwise" line122="        Clockwise = 7," line123="        //% block=Anticlockwise" line124="        Anticlockwise = 8," line125="        //% block=Wave" line126="        Wave = 9" line127="    }" line128="" line129="    export let _speed_left = 700; //1023 = 100% speed" line130="    export let _speed_right = 700;" line131="    export let _dir_right = 1; //0 = stop, 1 = forward, 2 = backward" line132="    export let _dir_left = 1;" line133="    export let identifiant = 0;" line134="    export let grovegestureinit = 0;" line135="" line136="    let TubeTab: number[] = [" line137="        0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07," line138="        0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71" line139="    ];" line140="" line141="    export let digit_clkPin: DigitalPin;" line142="    export let digit_dataPin: DigitalPin;" line143="    export let digit_brightnessLevel: number;" line144="    export let digit_pointFlag: boolean;" line145="    export let digit_buf: Buffer;" line146="" line147="    /**" line148="     * Iot ThingSpeak" line149="    **/" line150="    " line151="    let wifi_connected: boolean = false" line152="    let thingspeak_connected: boolean = false" line153="    let last_upload_successful: boolean = false" line154="" line155="" line156="    /**" line157="     * Control Robot speed [0-100%]" line158="     * @param dir direction" line159="     * @param speed speed in %" line160="     */" line161="    //% blockId=RobotDriverRobotMove" line162="    //% block=&quot;move %dir| speed %speed&quot;" line163="    //% speed.min=0 speed.max=100" line164="    //% parts=&quot;RobotDriver&quot; advanced=false" line165="    //% speed.defl=75" line166="    //% subcategory=Motor  group=&quot;Motors DC&quot; color=#FF1344 icon=&quot;\uf1eb&quot;" line167="    export function robotMove(dir: RobotDirection, speed: number): void {" line168="        setSpeed(Motors.MotorFull, speed);" line169="        switch (dir) {" line170="            case RobotDirection.Forward:" line171="                setDir(Motors.MotorFull, MotorDirection.Forward);" line172="                break" line173="            case RobotDirection.Reverse:" line174="                setDir(Motors.MotorFull, MotorDirection.Reverse);" line175="                break" line176="            case RobotDirection.RotateRight:" line177="                setDir(Motors.Motor1, MotorDirection.Forward);" line178="                setDir(Motors.Motor2, MotorDirection.Reverse);" line179="                break" line180="            case RobotDirection.RotateLef:" line181="                setDir(Motors.Motor1, MotorDirection.Reverse);" line182="                setDir(Motors.Motor2, MotorDirection.Forward);" line183="                break" line184="            case RobotDirection.TurnRigh:" line185="                setDir(Motors.Motor1, MotorDirection.Forward);" line186="                setDir(Motors.Motor2, MotorDirection.Stop);" line187="                break" line188="            case RobotDirection.TurnLef:" line189="                setDir(Motors.Motor1, MotorDirection.Stop);" line190="                setDir(Motors.Motor2, MotorDirection.Forward);" line191="                break" line192="            case RobotDirection.Stop:" line193="                setDir(Motors.MotorFull, MotorDirection.Stop);" line194="                break" line195="        }" line196="        setMotors();" line197="    }" line198="" line199="" line200="    /**" line201="     * Change the motor direction" line202="     * @param motor selection (left, right)" line203="     * @param dir rotation direction (forward, backward)" line204="     */" line205="    //% blockId=RobotDrivermotordir" line206="    //% block=&quot;set %motor| %dir&quot;" line207="    //% parts=&quot;RobotDriver&quot; advanced=false" line208="    //% motor.defl=MotorFull" line209="    //% subcategory=Motor  group=&quot;Motors DC&quot; color=#FF1344 icon=&quot;\uf1eb&quot;" line210="    export function motorDir(motor: Motors, dir: MotorDirection): void {" line211="        setDir(motor, dir);" line212="        setMotors();" line213="    }" line214="" line215="    /**" line216="     * Change the motor speed [0-100%]" line217="     * @param motor selection (left, right)" line218="     * @param new speed (0-100%)" line219="     */" line220="" line221="    //% blockId=robotdrivermotorspeed" line222="    //% block=&quot;set %motor| to %speed %&quot;" line223="    //% speed.min=0 speed.max=100" line224="    //% parts=&quot;A4_Robot_Driver&quot; advanced=false" line225="    //% speed.defl=75" line226="    //% subcategory=Motor  group=&quot;Motors DC&quot; color=#FF1344 icon=&quot;\uf1eb&quot;" line227="    export function motorSpeed(motor: Motors, speed: number): void {" line228="        setSpeed(motor, speed);" line229="        setMotors();" line230="    }" line231="" line232="    /**" line233="     * Stop both motors" line234="    */" line235="    //% blockId=RobotDriverRobotStop" line236="    //% block=&quot;stop both motors&quot;" line237="    //% subcategory=Motor  group=&quot;Motors DC&quot; color=#FF1344 icon=&quot;\uf1eb&quot;" line238="    export function motorStop(): void {" line239="        robotMove(hackbit.RobotDirection.Stop, 0)" line240="    }" line241="" line242="    /**" line243="     * Set the servomotor position [0-180deg]" line244="     * @param pin servomotor pin (right or left)" line245="     */" line246="    //% blockId=RobotDriverservodegrees" line247="    //% block=&quot;servomotor |%pin| to |%angle| degree&quot;" line248="    //% parts=&quot;RobotDriver&quot; advanced=false" line249="    //% angle.shadow=&quot;protractorPicker&quot;" line250="    //% angle.defl=90" line251="    //% subcategory=Motor  group=&quot;Servo Motors&quot; color=#FF1344 icon=&quot;\uf1eb&quot;" line252="    export function setServoMotor(pin: AnalogPin, angle: number): void {" line253="        pins.servoWritePin(pin, Math.constrain(angle, 0, 180));" line254="    }" line255="" line256="    /**" line257="     * get distance from ultrasonic range sensor [cm]" line258="     * @param pin Input pin" line259="     */" line260="    //% blockId=RobotDriverultrasonic_cm " line261="    //% block=&quot;ultrasonic distance|%name| (cm)&quot;" line262="    //% name.fieldEditor=&quot;gridpicker&quot; " line263="    //% name.fieldOptions.columns=5" line264="    //% name.fieldOptions.tooltips=&quot;false&quot;" line265="    //% name.fieldOptions.width=&quot;0&quot;" line266="    //% subcategory=Sensor  group=&quot;Digital&quot; color=#1371FF icon=&quot;\uf1eb&quot;" line267="    export function measureDistanceCentimeter(name: DigitalPin): number {" line268="        let duration = 0;" line269="        let distance = 0;" line270="        pins.digitalWritePin(name, 0); //make sure pin is low" line271="        control.waitMicros(2);" line272="        pins.digitalWritePin(name, 1); //send echo" line273="        control.waitMicros(20);" line274="        pins.digitalWritePin(name, 0);" line275="        duration = pins.pulseIn(name, PulseValue.High, 50000); // Max duration 50 ms - receive echo" line276="        distance = duration * 153 / 29 / 2 / 100;" line277="        Math.constrain(distance, 0, 500);" line278="        return distance;" line279="    }" line280="" line281="    /**" line282="     * Get line sensor state [0-1]" line283="    */" line284="    //% blockId=hackbitLineRead" line285="    //% block=&quot;line sensor |%pin|&quot;" line286="    //% subcategory=Sensor  group=&quot;Digital&quot; color=#1371FF icon=&quot;\uf1eb&quot;        " line287="    export function detectline(pin: DigitalPin): number {" line288="        return pins.digitalReadPin(pin);" line289="    }" line290="" line291="    /**" line292="     * Get analog potentiometer value [0-1023]" line293="    */" line294="    //% blockId=hackbitPotargRead" line295="    //% block=&quot;potentiometer |%pin|&quot;" line296="    //% subcategory=Input  group=&quot;Analog&quot; color=#851DE8 icon=&quot;\uf1eb&quot;" line297="    export function potarValue(pin: AnalogPin): number {" line298="        return pins.analogReadPin(pin);" line299="    }" line300="" line301="    /**" line302="     * Get collision sensor state [0-1]" line303="    */" line304="    //% blockId=hackbitCollisionRead" line305="    //% block=&quot;collision sensor |%pin|&quot;" line306="    //% subcategory=Input  group=&quot;Digital&quot; color=#851DE8 icon=&quot;\uf1eb&quot;    " line307="    export function collisionSensor(pin: BP): boolean {" line308="        if (pin)" line309="            return input.buttonIsPressed(Button.A);" line310="        return input.buttonIsPressed(Button.B);" line311="    }" line312="" line313="    /**" line314="     * Get button state [0-1]" line315="    */" line316="    //% blockId=hackbitButtonRead" line317="    //% block=&quot;button |%pin|&quot;" line318="    //% subcategory=Input  group=&quot;Digital&quot; color=#851DE8 icon=&quot;\uf1eb&quot;    " line319="    export function buttonState(pin: DigitalPin): number {" line320="        return pins.digitalReadPin(pin);" line321="    }" line322="" line323="    /**" line324="     * Set Led state" line325="    */" line326="    //% blockId=hackbitLedSet" line327="    //% block=&quot;led |%pin| to |%state|&quot;" line328="    //% state.min=0 state.max=1" line329="    //% subcategory=Display  group=&quot;Digital&quot; color=#F57513 icon=&quot;\uf1eb&quot;    " line330="    export function ledState(pin: DigitalPin, state: OnOff): void {" line331="        pins.digitalWritePin(pin, state);" line332="    }" line333="" line334="    /**" line335="    * Get color from I2C Grove Color Sensor v1.3 or v2.0" line336="    * [0;65534]" line337="    * @param selected color" line338="    */" line339="    //% blockId=&quot;grovecolorsensorgetcolor&quot; " line340="    //% block=&quot;color %Color&quot;" line341="    //% block.loc.fr=&quot;Valeur de la couleur %Color du capteur de couleur grove&quot;" line342="    //% jsdoc = &quot;Grab sensor value from grove color sensor&quot;" line343="    //% subcategory=Sensor  group=&quot;IIC&quot; color=#EA5532 icon=&quot;\uf1eb&quot;    " line344="" line345="    export function color(col: Color): NumberFormat.UInt16BE {" line346="        let nums, red, green, blue, clear: number;" line347="" line348="        if (identifiant == 0) {   // No sensor previously detected" line349="            pins.i2cWriteNumber(57, 132, NumberFormat.UInt8BE, false);" line350="            nums = pins.i2cReadNumber(57, NumberFormat.UInt8BE, false);" line351="            if (nums == 17) {     // Grove Sensor v1.3 detected" line352="                identifiant = 1;" line353="                pins.i2cWriteNumber(57, 129, NumberFormat.UInt8BE, false);" line354="                pins.i2cWriteNumber(57, 0, NumberFormat.UInt8BE, true);" line355="                pins.i2cWriteNumber(57, 135, NumberFormat.UInt8BE, false);" line356="                pins.i2cWriteNumber(57, 48, NumberFormat.UInt8BE, true);" line357="                pins.i2cWriteNumber(57, 128, NumberFormat.UInt8BE, false);" line358="                pins.i2cWriteNumber(57, 3, NumberFormat.UInt8BE, true);" line359="                basic.pause(50);" line360="            } else {" line361="                pins.i2cWriteNumber(41, 146, NumberFormat.UInt8BE, false);" line362="                nums = pins.i2cReadNumber(41, NumberFormat.UInt8BE, false);" line363="                if (nums == 68) {     // Grove Sensor v2 detected " line364="                    identifiant = 2;" line365="                    pins.i2cWriteNumber(41, 129, NumberFormat.UInt8BE, false);" line366="                    pins.i2cWriteNumber(41, 249, NumberFormat.UInt8BE, true);" line367="                    pins.i2cWriteNumber(41, 143, NumberFormat.UInt8BE, false);" line368="                    pins.i2cWriteNumber(41, 2, NumberFormat.UInt8BE, true);" line369="                    pins.i2cWriteNumber(41, 128, NumberFormat.UInt8BE, false);" line370="                    pins.i2cWriteNumber(41, 1, NumberFormat.UInt8BE, true);" line371="                    basic.pause(50);" line372="                    pins.i2cWriteNumber(41, 128, NumberFormat.UInt8BE, false);" line373="                    pins.i2cWriteNumber(41, 3, NumberFormat.UInt8BE, true);" line374="                    basic.pause(500);" line375="                }" line376="            }" line377="        }" line378="" line379="        if (identifiant == 1) {    // Grove Sensor v1.3 detected" line380="            switch (col) {" line381="                case Color.Red:" line382="                    pins.i2cWriteNumber(57, 210, NumberFormat.UInt8BE, false);" line383="                    red = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line384="                    return swap16(red)" line385="                    break" line386="                case Color.Green:" line387="                    pins.i2cWriteNumber(57, 208, NumberFormat.UInt8BE, false);" line388="                    green = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line389="                    return swap16(green)" line390="                    break" line391="                case Color.Blue:" line392="                    pins.i2cWriteNumber(57, 212, NumberFormat.UInt8BE, false);" line393="                    blue = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line394="                    return swap16(blue)" line395="                    break" line396="                case Color.Clear:" line397="                    pins.i2cWriteNumber(57, 214, NumberFormat.UInt8BE, false);" line398="                    clear = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line399="                    return swap16(clear)" line400="                    break" line401="            }" line402="        }" line403="        else if (identifiant == 2) {" line404="            switch (col) {" line405="                case Color.Red:" line406="                    pins.i2cWriteNumber(41, 150, NumberFormat.UInt8BE, false);" line407="                    red = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line408="                    return swap16(red)" line409="                    break" line410="                case Color.Green:" line411="                    pins.i2cWriteNumber(41, 152, NumberFormat.UInt8BE, false);" line412="                    green = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line413="                    return swap16(green)" line414="                    break" line415="                case Color.Blue:" line416="                    pins.i2cWriteNumber(41, 154, NumberFormat.UInt8BE, false);" line417="                    blue = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line418="                    return swap16(blue)" line419="                    break" line420="                case Color.Clear:" line421="                    pins.i2cWriteNumber(41, 148, NumberFormat.UInt8BE, false);" line422="                    clear = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line423="                    return swap16(clear)" line424="                    break" line425="            }" line426="            return 0;" line427="        }" line428="        return 0;" line429="    }" line430="" line431="    /**" line432="     * Detect and recognize the gestures from Grove - Gesture" line433="     * None:0" line434="     * Right:1" line435="     * Left:2" line436="     * Up:3" line437="     * Down:4" line438="     * Forward:5" line439="     * Backward:6" line440="     * Clockwise:7" line441="     * Anticlockwise:8" line442="     * Wave:9" line443="     */" line444="    //% blockId=hackbitGroveGesture" line445="    //% subcategory=Sensor  group=&quot;IIC&quot; color=#EA5532 icon=&quot;\uf1eb&quot;    " line446="    export function grove_gesture_reads(): number {" line447="        let data = 0, result = 0;" line448="" line449="        if (grovegestureinit == 0) {" line450="            paj7620Init();" line451="            basic.pause(200);" line452="            grovegestureinit = 1;" line453="        }" line454="" line455="        data = paj7620ReadReg(0x43);" line456="        switch (data) {" line457="            case 0x01:" line458="                result = GroveGesture.Right;" line459="                break;" line460="" line461="            case 0x02:" line462="                result = GroveGesture.Left;" line463="                break;" line464="" line465="            case 0x04:" line466="                result = GroveGesture.Up;" line467="                break;" line468="" line469="            case 0x08:" line470="                result = GroveGesture.Down;" line471="                break;" line472="" line473="            case 0x10:" line474="                result = GroveGesture.Forward;" line475="                break;" line476="" line477="            case 0x20:" line478="                result = GroveGesture.Backward;" line479="                break;" line480="" line481="            case 0x40:" line482="                result = GroveGesture.Clockwise;" line483="                break;" line484="" line485="            case 0x80:" line486="                result = GroveGesture.Anticlockwise;" line487="                break;" line488="" line489="            default:" line490="                data = paj7620ReadReg(0x44);" line491="                if (data == 0x01)" line492="                    result = GroveGesture.Wave;" line493="                break;" line494="        }" line495="        return result;" line496="    }" line497="" line498="    /**" line499="     * Create a new driver Grove - 4-Digit Display" line500="     * @param clkPin value of clk pin number" line501="     * @param dataPin value of data pin number" line502="     */" line503="    //% blockId=hackbit_tm1637_create block=&quot;4-Digit Display at|%clkPin|and|%dataPin&quot;" line504="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513 icon=&quot;\uf1eb&quot;    " line505="    //% weight=60" line506="    export function digit_createDisplay(clkPin: DigitalPin, dataPin: DigitalPin): void {" line507="        digit_buf = pins.createBuffer(4);" line508="        digit_clkPin = clkPin;" line509="        digit_dataPin = dataPin;" line510="        digit_brightnessLevel = 0;" line511="        digit_pointFlag = false;" line512="        digit_clear();" line513="    }" line514="" line515="    /**" line516="    * Show a 4 digits number on display" line517="    * @param dispData value of number" line518="    */" line519="    //% blockId=hackbit_tm1637_display_number block=&quot;show number|%dispData&quot;" line520="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513 icon=&quot;\uf1eb&quot;    " line521="    //% weight=59" line522="    export function digit_show(dispData: number) {" line523="        let compare_01: number = dispData % 100;" line524="        let compare_001: number = dispData % 1000;" line525="" line526="        if (dispData &lt; 10) {" line527="            digit_bit(dispData, 3);" line528="            digit_bit(0x7f, 2);" line529="            digit_bit(0x7f, 1);" line530="            digit_bit(0x7f, 0);" line531="        }" line532="        else if (dispData &lt; 100) {" line533="            digit_bit(dispData % 10, 3);" line534="            if (dispData &gt; 90) {" line535="                digit_bit(9, 2);" line536="            } else {" line537="                digit_bit(Math.floor(dispData / 10) % 10, 2);" line538="            }" line539="" line540="            digit_bit(0x7f, 1);" line541="            digit_bit(0x7f, 0);" line542="        }" line543="        else if (dispData &lt; 1000) {" line544="            digit_bit(dispData % 10, 3);" line545="            if (compare_01 &gt; 90) {" line546="                digit_bit(9, 2);" line547="            } else {" line548="                digit_bit(Math.floor(dispData / 10) % 10, 2);" line549="            }" line550="            if (compare_001 &gt; 900) {" line551="                digit_bit(9, 1);" line552="            } else {" line553="                digit_bit(Math.floor(dispData / 100) % 10, 1);" line554="            }" line555="            digit_bit(0x7f, 0);" line556="        }" line557="        else if (dispData &lt; 10000) {" line558="            digit_bit(dispData % 10, 3);" line559="            if (compare_01 &gt; 90) {" line560="                digit_bit(9, 2);" line561="            } else {" line562="                digit_bit(Math.floor(dispData / 10) % 10, 2);" line563="            }" line564="            if (compare_001 &gt; 900) {" line565="                digit_bit(9, 1);" line566="            } else {" line567="                digit_bit(Math.floor(dispData / 100) % 10, 1);" line568="            }" line569="            if (dispData &gt; 9000) {" line570="                digit_bit(9, 0);" line571="            } else {" line572="                digit_bit(Math.floor(dispData / 1000) % 10, 0);" line573="            }" line574="        }" line575="        else {" line576="            digit_bit(9, 3);" line577="            digit_bit(9, 2);" line578="            digit_bit(9, 1);" line579="            digit_bit(9, 0);" line580="        }" line581="    }" line582="" line583="    /**" line584="     * Set the brightness level of display at from 0 to 7" line585="     * @param level value of brightness light level" line586="     */" line587="    //% blockId=hackbit_tm1637_set_display_level block=&quot;brightness level to|%level&quot;" line588="    //% level.min=0 level.max=7" line589="    //% weight=58" line590="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513 icon=&quot;\uf1eb&quot;     " line591="    export function digit_set(level: number) {" line592="        digit_brightnessLevel = level;" line593="" line594="        digit_bit(digit_buf[0], 0x00);" line595="        digit_bit(digit_buf[1], 0x01);" line596="        digit_bit(digit_buf[2], 0x02);" line597="        digit_bit(digit_buf[3], 0x03);" line598="    }" line599="" line600="    /**" line601="     * Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display" line602="     * @param dispData value of number" line603="     * @param bitAddr value of bit number" line604="     */" line605="    //% blockId=grove_tm1637_display_bit block=&quot;%strip|show single number|%dispData|at digit|%bitAddr&quot;" line606="    //% dispData.min=0 dispData.max=9" line607="    //% bitAddr.min=0 bitAddr.max=3" line608="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513 icon=&quot;\uf1eb&quot;    " line609="    //% advanced=false" line610="    export function digit_bit(dispData: number, bitAddr: number) {" line611="        if ((dispData == 0x7f) || ((dispData &lt;= 9) &amp;&amp; (bitAddr &lt;= 3))) {" line612="            let segData = 0;" line613="" line614="            segData = digit_coding(dispData);" line615="            digit_start();" line616="            digit_writeByte(0x44);" line617="            digit_stop();" line618="            digit_start();" line619="            digit_writeByte(bitAddr | 0xc0);" line620="            digit_writeByte(segData);" line621="            digit_stop();" line622="            digit_start();" line623="            digit_writeByte(0x88 + digit_brightnessLevel);" line624="            digit_stop();" line625="" line626="            digit_buf[bitAddr] = dispData;" line627="        }" line628="    }" line629="" line630="    /**" line631="     * Turn on or off the colon point on Grove - 4-Digit Display" line632="     * @param pointEn value of point switch" line633="     */" line634="    //% blockId=grove_tm1637_display_point block=&quot;%strip|turn|%point|colon point&quot;" line635="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513 icon=&quot;\uf1eb&quot;   " line636="    //% advanced=false" line637="    export function digit_point(point: boolean) {" line638="        digit_pointFlag = point;" line639="" line640="        digit_bit(digit_buf[0], 0x00);" line641="        digit_bit(digit_buf[1], 0x01);" line642="        digit_bit(digit_buf[2], 0x02);" line643="        digit_bit(digit_buf[3], 0x03);" line644="    }" line645="" line646="    /**" line647="     * Clear the display" line648="     */" line649="    //% blockId=grove_tm1637_display_clear block=&quot;%strip|clear&quot;" line650="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513 icon=&quot;\uf1eb&quot;    " line651="    //% advanced=false" line652="    export function digit_clear() {" line653="        digit_bit(0x7f, 0x00);" line654="        digit_bit(0x7f, 0x01);" line655="        digit_bit(0x7f, 0x02);" line656="        digit_bit(0x7f, 0x03);" line657="    }" line658="" line659="    /**" line660="     * WiFi/IoT" line661="     * Initialize ESP8266 module and connect it to Wifi router" line662="     */" line663="    //% block=&quot;Initialize ESP8266|RX (Tx of micro:bit) %tx|TX (Rx of micro:bit) %rx|Baud rate %baudrate|Wifi SSID = %ssid|Wifi PW = %pw&quot;" line664="    //% tx.defl=SerialPin.P0" line665="    //% rx.defl=SerialPin.P1" line666="    //% ssid.defl=your_ssid" line667="    //% pw.defl=your_pw" line668="    //% subcategory=IoT group=&quot;ThingSpeak&quot; color=#00F5A9 icon=&quot;\uf1eb&quot;    " line669="    //% advanced=false" line670="" line671="    export function connectWifi(tx: SerialPin, rx: SerialPin, baudrate: BaudRate, ssid: string, pw: string) {" line672="        wifi_connected = false" line673="        thingspeak_connected = false" line674="        serial.redirect(" line675="            tx," line676="            rx," line677="            baudrate" line678="        )" line679="        sendAT(&quot;AT+RESTORE&quot;, 1000) // restore to factory settings" line680="        sendAT(&quot;AT+CWMODE=1&quot;) // set to STA mode" line681="        sendAT(&quot;AT+RST&quot;, 1000) // reset" line682="        sendAT(&quot;AT+CWJAP=\&quot;&quot; + ssid + &quot;\&quot;,\&quot;&quot; + pw + &quot;\&quot;&quot;, 0) // connect to Wifi router" line683="        wifi_connected = waitResponse()" line684="        basic.pause(100)" line685="    }" line686="" line687="    /**" line688="    * Connect to ThingSpeak and upload data. It would not upload anything if it failed to connect to Wifi or ThingSpeak." line689="    */" line690="    //% block=&quot;Upload data to ThingSpeak|URL/IP = %ip|Write API key = %write_api_key|Field 1 = %n1|Field 2 = %n2|Field 3 = %n3|Field 4 = %n4|Field 5 = %n5|Field 6 = %n6|Field 7 = %n7|Field 8 = %n8&quot;" line691="    //% ip.defl=api.thingspeak.com" line692="    //% write_api_key.defl=your_write_api_key" line693="    //% subcategory=IoT group=&quot;ThingSpeak&quot; color=#00F5A9 icon=&quot;\uf1eb&quot;    " line694="    //% advanced=false" line695="" line696="    export function connectThingSpeak(ip: string, write_api_key: string, n1: number, n2: number, n3: number, n4: number, n5: number, n6: number, n7: number, n8: number) {" line697="        if (wifi_connected &amp;&amp; write_api_key != &quot;&quot;) {" line698="            thingspeak_connected = false" line699="            sendAT(&quot;AT+CIPSTART=\&quot;TCP\&quot;,\&quot;&quot; + ip + &quot;\&quot;,80&quot;, 0) // connect to website server" line700="            thingspeak_connected = waitResponse()" line701="            basic.pause(100)" line702="            if (thingspeak_connected) {" line703="                last_upload_successful = false" line704="                let str: string = &quot;GET /update?api_key=&quot; + write_api_key + &quot;&amp;field1=&quot; + n1 + &quot;&amp;field2=&quot; + n2 + &quot;&amp;field3=&quot; + n3 + &quot;&amp;field4=&quot; + n4 + &quot;&amp;field5=&quot; + n5 + &quot;&amp;field6=&quot; + n6 + &quot;&amp;field7=&quot; + n7 + &quot;&amp;field8=&quot; + n8" line705="                sendAT(&quot;AT+CIPSEND=&quot; + (str.length + 2))" line706="                sendAT(str, 0) // upload data" line707="                last_upload_successful = waitResponse()" line708="                basic.pause(100)" line709="            }" line710="        }" line711="    }" line712="" line713="    /**" line714="    * Wait between uploads" line715="    */" line716="    //% block=&quot;Wait %delay ms&quot;" line717="    //% delay.min=0 delay.defl=5000" line718="    //% subcategory=IoT group=&quot;ThingSpeak&quot; color=#00F5A9 icon=&quot;\uf1eb&quot;    " line719="    //% advanced=false" line720="" line721="    export function wait(delay: number) {" line722="        if (delay &gt; 0) basic.pause(delay)" line723="    }" line724="" line725="    /**" line726="    * Check if ESP8266 successfully connected to Wifi" line727="    */" line728="    //% block=&quot;Wifi connected ?&quot;" line729="    //% subcategory=IoT group=&quot;ThingSpeak&quot; color=#00F5A9 icon=&quot;\uf1eb&quot;    " line730="    //% advanced=false" line731="" line732="    export function isWifiConnected() {" line733="        return wifi_connected" line734="    }" line735="" line736="    /**" line737="    * Check if ESP8266 successfully connected to ThingSpeak" line738="    */" line739="    //% block=&quot;ThingSpeak connected ?&quot;" line740="    //% subcategory=IoT group=&quot;ThingSpeak&quot; color=#00F5A9 icon=&quot;\uf1eb&quot;    " line741="    //% advanced=false" line742="" line743="    export function isThingSpeakConnected() {" line744="        return thingspeak_connected" line745="    }" line746="" line747="    /**" line748="    * Check if ESP8266 successfully uploaded data to ThingSpeak" line749="    */" line750="    //% block=&quot;Last data upload successful ?&quot;" line751="    //% subcategory=IoT group=&quot;ThingSpeak&quot; color=#00F5A9 icon=&quot;\uf1eb&quot;    " line752="    //% advanced=false" line753="" line754="    export function isLastUploadSuccessful() {" line755="        return last_upload_successful" line756="    }" line757="" line758="    /*" line759="     * Private functions" line760="     */" line761="    function swap16(val: NumberFormat.UInt16BE) {" line762="        return ((val &amp; 0xFF) &lt;&lt; 8)" line763="            | ((val &gt;&gt; 8) &amp; 0xFF);" line764="    }" line765="" line766="    function setDir(motor: Motors, dir: MotorDirection): void {" line767="        switch (motor) {" line768="            case Motors.Motor1: //gauche" line769="                _dir_left = dir;" line770="                break" line771="            case Motors.Motor2: //droit" line772="                _dir_right = dir;" line773="                break" line774="            case Motors.MotorFull: //droit" line775="                _dir_left = dir;" line776="                _dir_right = dir;" line777="                break" line778="        }" line779="    }" line780="" line781="    function setSpeed(motor: Motors, speed: number): void {" line782="        let corrected_speed = Math.min(Math.map(speed, 0, 100, 0, 1023), 1023);" line783="        switch (motor) {" line784="            case Motors.Motor1:" line785="                _speed_left = corrected_speed;" line786="                break" line787="            case Motors.Motor2:" line788="                _speed_right = corrected_speed;" line789="                break" line790="            case Motors.MotorFull:" line791="                _speed_left = corrected_speed;" line792="                _speed_right = corrected_speed;" line793="                break" line794="        }" line795="    }" line796="" line797="    function setMotors(): void {" line798="        if (_dir_right == 1) {" line799="            pins.digitalWritePin(DigitalPin.P15, 0);" line800="            pins.analogWritePin(AnalogPin.P16, _speed_right);" line801="        } else if (_dir_right == 2) {" line802="            pins.analogWritePin(AnalogPin.P15, _speed_right);" line803="            pins.digitalWritePin(DigitalPin.P16, 0);" line804="        } else {" line805="            pins.digitalWritePin(DigitalPin.P15, 0);" line806="            pins.digitalWritePin(DigitalPin.P16, 0);" line807="        }" line808="        if (_dir_left == 1) {" line809="            pins.digitalWritePin(DigitalPin.P13, 0);" line810="            pins.analogWritePin(AnalogPin.P14, _speed_left);" line811="        } else if (_dir_left == 2) {" line812="            pins.analogWritePin(AnalogPin.P13, _speed_left);" line813="            pins.digitalWritePin(DigitalPin.P14, 0);" line814="        } else {" line815="            pins.digitalWritePin(DigitalPin.P13, 0);" line816="            pins.digitalWritePin(DigitalPin.P14, 0);" line817="        }" line818="    }" line819="" line820="    function digit_writeByte(wrData: number) {" line821="        for (let i = 0; i &lt; 8; i++) {" line822="            pins.digitalWritePin(digit_clkPin, 0);" line823="            if (wrData &amp; 0x01) pins.digitalWritePin(digit_dataPin, 1);" line824="            else pins.digitalWritePin(digit_dataPin, 0);" line825="            wrData &gt;&gt;= 1;" line826="            pins.digitalWritePin(digit_clkPin, 1);" line827="        }" line828="" line829="        pins.digitalWritePin(digit_clkPin, 0); // Wait for ACK" line830="        pins.digitalWritePin(digit_dataPin, 1);" line831="        pins.digitalWritePin(digit_clkPin, 1);" line832="    }" line833="" line834="    function digit_start() {" line835="        pins.digitalWritePin(digit_clkPin, 1);" line836="        pins.digitalWritePin(digit_dataPin, 1);" line837="        pins.digitalWritePin(digit_dataPin, 0);" line838="        pins.digitalWritePin(digit_clkPin, 0);" line839="    }" line840="" line841="    function digit_stop() {" line842="        pins.digitalWritePin(digit_clkPin, 0);" line843="        pins.digitalWritePin(digit_dataPin, 0);" line844="        pins.digitalWritePin(digit_clkPin, 1);" line845="        pins.digitalWritePin(digit_dataPin, 1);" line846="    }" line847="" line848="    function digit_coding(dispData: number): number {" line849="        let pointData = 0;" line850="" line851="        if (digit_pointFlag == true) pointData = 0x80;" line852="        else if (digit_pointFlag == false) pointData = 0;" line853="" line854="        if (dispData == 0x7f) dispData = 0x00 + pointData;" line855="        else dispData = TubeTab[dispData] + pointData;" line856="" line857="        return dispData;" line858="    }" line859="" line860="    function paj7620WriteReg(addr: number, cmd: number) {" line861="        let buf: Buffer = pins.createBuffer(2);" line862="" line863="        buf[0] = addr;" line864="        buf[1] = cmd;" line865="" line866="        pins.i2cWriteBuffer(0x73, buf, false);" line867="    }" line868="" line869="    function paj7620ReadReg(addr: number): number {" line870="        let buf2: Buffer = pins.createBuffer(1);" line871="" line872="        buf2[0] = addr;" line873="" line874="        pins.i2cWriteBuffer(0x73, buf2, false);" line875="" line876="        buf2 = pins.i2cReadBuffer(0x73, 1, false);" line877="" line878="        return buf2[0];" line879="    }" line880="" line881="    function paj7620SelectBank(bank: number) {" line882="        if (bank == 0) paj7620WriteReg(0xEF, 0);" line883="        else if (bank == 1) paj7620WriteReg(0xEF, 1);" line884="    }" line885="" line886="    function paj7620Init() {" line887="        let temp = 0;" line888="" line889="        paj7620SelectBank(0);" line890="" line891="        temp = paj7620ReadReg(0);" line892="        if (temp == 0x20) {" line893="            for (let j = 0; j &lt; 438; j += 2) {" line894="                paj7620WriteReg(initRegisterArray[j], initRegisterArray[j + 1]);" line895="            }" line896="        }" line897="" line898="        paj7620SelectBank(0);" line899="    }" line900="" line901="    /**" line902="     * Iot ThingSpeak" line903="    **/" line904="" line905="    // write AT command with CR+LF ending" line906="    function sendAT(command: string, wait: number = 100) {" line907="        serial.writeString(command + &quot;\u000D\u000A&quot;)" line908="        basic.pause(wait)" line909="    }" line910="" line911="    // wait for certain response from ESP8266" line912="    function waitResponse(): boolean {" line913="        let serial_str: string = &quot;&quot;" line914="        let result2: boolean = false" line915="        let time: number = input.runningTime()" line916="        while (true) {" line917="            serial_str += serial.readString()" line918="            if (serial_str.length &gt; 200) serial_str = serial_str.substr(serial_str.length - 200)" line919="            if (serial_str.includes(&quot;OK&quot;) || serial_str.includes(&quot;ALREADY CONNECTED&quot;)) {" line920="                result2 = true" line921="                break" line922="            } else if (serial_str.includes(&quot;ERROR&quot;) || serial_str.includes(&quot;SEND FAIL&quot;)) {" line923="                break" line924="            }" line925="            if (input.runningTime() - time &gt; 30000) break" line926="        }" line927="        return result2" line928="    }" line929="    /**" line930="     * end Iot ThingSpeak" line931="    **/" line932="" line933="" line934="}" numlines="935"></mutation></block></statement></block></xml>