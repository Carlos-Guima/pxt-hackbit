<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="F(KYB626Sa@A!a~5.J1B" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="avdKxTY2_MNyep7UmMn1" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace hackbit {" line1="    const initRegisterArray: number[] = [" line2="        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17," line3="        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F," line4="        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14," line5="        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27," line6="        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01," line7="        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00," line8="        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20," line9="        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37," line10="        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A," line11="        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F," line12="        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30," line13="        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19," line14="        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04," line15="        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00," line16="        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00," line17="        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F," line18="        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07," line19="        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01," line20="        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F," line21="        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01," line22="        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40," line23="        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E," line24="        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00," line25="        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08," line26="        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00," line27="        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01," line28="        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01," line29="        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01" line30="    ];" line31="" line32="    export enum MotorDirection {" line33="        //% block=&quot;Forward&quot;" line34="        Forward = 1," line35="        //% block=&quot;Backward&quot;" line36="        Reverse = 2," line37="        //% block=&quot;Stop&quot;" line38="        Stop = 0" line39="    }" line40="" line41="    export enum OnOff {" line42="        //% block=&quot;On&quot;" line43="        On = 1," line44="        //% block=&quot;Off&quot;" line45="        Off = 0" line46="    }" line47="" line48="    export enum BP {" line49="        //% block=&quot;BPA&quot;" line50="        BPA = 1," line51="        //% block=&quot;BPB&quot;" line52="        BPB = 0" line53="    }" line54="" line55="    export enum RobotDirection {" line56="        //% block=&quot;Forward&quot;" line57="        Forward," line58="        //% block=&quot;Backward&quot;" line59="        Reverse," line60="        //% block=&quot;Turn Right&quot;" line61="        TurnRigh," line62="        //% block=&quot;Turn Left&quot;" line63="        TurnLef," line64="        //% block=&quot;Rotate Right&quot;" line65="        RotateRight," line66="        //% block=&quot;Rotate Left&quot;" line67="        RotateLef," line68="        //% block=&quot;Stop&quot;" line69="        Stop" line70="    }" line71="" line72="    export enum Motors {" line73="        //%blockId=A4_Robot_Driver_motor_one" line74="        //% block=&quot;left motor&quot;" line75="        Motor1," line76="        //%blockId=A4_Robot_Driver_motor_two" line77="        //% block=&quot;right motor&quot;" line78="        Motor2," line79="        //%blockId=A4_Robot_Driver_motor_full" line80="        //% block=&quot;left and right motor&quot;" line81="        MotorFull" line82="    }" line83="" line84="    export enum Color {" line85="        //% block=&quot;Red&quot;" line86="        Red," line87="        //% block=&quot;Green&quot;" line88="        Green," line89="        //% block=&quot;Blue&quot;" line90="        Blue," line91="        //% block=&quot;Clear&quot;" line92="        Clear" line93="    }" line94="" line95="    export enum GroveGesture {" line96="        //% block=None" line97="        None = 0," line98="        //% block=Right" line99="        Right = 1," line100="        //% block=Left" line101="        Left = 2," line102="        //% block=Up" line103="        Up = 3," line104="        //% block=Down" line105="        Down = 4," line106="        //% block=Forward" line107="        Forward = 5," line108="        //% block=Backward" line109="        Backward = 6," line110="        //% block=Clockwise" line111="        Clockwise = 7," line112="        //% block=Anticlockwise" line113="        Anticlockwise = 8," line114="        //% block=Wave" line115="        Wave = 9" line116="    }" line117="" line118="    export let _speed_left = 700; //1023 = 100% speed" line119="    export let _speed_right = 700;" line120="    export let _dir_right = 1; //0 = stop, 1 = forward, 2 = backward" line121="    export let _dir_left = 1;" line122="    export let identifiant = 0;" line123="    export let grovegestureinit = 0;" line124="" line125="    let TubeTab: number[] = [" line126="        0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07," line127="        0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71" line128="    ];" line129="" line130="    export let digit_clkPin: DigitalPin;" line131="    export let digit_dataPin: DigitalPin;" line132="    export let digit_brightnessLevel: number;" line133="    export let digit_pointFlag: boolean;" line134="    export let digit_buf: Buffer;" line135="" line136="    /**" line137="     * Iot ThingSpeak" line138="    **/" line139="    " line140="    let wifi_connected: boolean = false" line141="    let thingspeak_connected: boolean = false" line142="    let last_upload_successful: boolean = false" line143="" line144="" line145="    /**" line146="     * Control Robot speed [0-100%]" line147="     * @param dir direction" line148="     * @param speed speed in %" line149="     */" line150="    //% blockId=RobotDriverRobotMove" line151="    //% block=&quot;move %dir| speed %speed&quot;" line152="    //% speed.min=0 speed.max=100" line153="    //% parts=&quot;RobotDriver&quot; advanced=false" line154="    //% speed.defl=75" line155="    //% subcategory=Motor  group=&quot;Motors DC&quot; color=#FF1344 icon=&quot;\uf1eb&quot;" line156="    export function robotMove(dir: RobotDirection, speed: number): void {" line157="        setSpeed(Motors.MotorFull, speed);" line158="        switch (dir) {" line159="            case RobotDirection.Forward:" line160="                setDir(Motors.MotorFull, MotorDirection.Forward);" line161="                break" line162="            case RobotDirection.Reverse:" line163="                setDir(Motors.MotorFull, MotorDirection.Reverse);" line164="                break" line165="            case RobotDirection.RotateRight:" line166="                setDir(Motors.Motor1, MotorDirection.Forward);" line167="                setDir(Motors.Motor2, MotorDirection.Reverse);" line168="                break" line169="            case RobotDirection.RotateLef:" line170="                setDir(Motors.Motor1, MotorDirection.Reverse);" line171="                setDir(Motors.Motor2, MotorDirection.Forward);" line172="                break" line173="            case RobotDirection.TurnRigh:" line174="                setDir(Motors.Motor1, MotorDirection.Forward);" line175="                setDir(Motors.Motor2, MotorDirection.Stop);" line176="                break" line177="            case RobotDirection.TurnLef:" line178="                setDir(Motors.Motor1, MotorDirection.Stop);" line179="                setDir(Motors.Motor2, MotorDirection.Forward);" line180="                break" line181="            case RobotDirection.Stop:" line182="                setDir(Motors.MotorFull, MotorDirection.Stop);" line183="                break" line184="        }" line185="        setMotors();" line186="    }" line187="" line188="" line189="    /**" line190="     * Change the motor direction" line191="     * @param motor selection (left, right)" line192="     * @param dir rotation direction (forward, backward)" line193="     */" line194="    //% blockId=RobotDrivermotordir" line195="    //% block=&quot;set %motor| %dir&quot;" line196="    //% parts=&quot;RobotDriver&quot; advanced=false" line197="    //% motor.defl=MotorFull" line198="    //% subcategory=Motor  group=&quot;Motors DC&quot; color=#FF1344 icon=&quot;\uf1eb&quot;" line199="    export function motorDir(motor: Motors, dir: MotorDirection): void {" line200="        setDir(motor, dir);" line201="        setMotors();" line202="    }" line203="" line204="    /**" line205="     * Change the motor speed [0-100%]" line206="     * @param motor selection (left, right)" line207="     * @param new speed (0-100%)" line208="     */" line209="" line210="    //% blockId=robotdrivermotorspeed" line211="    //% block=&quot;set %motor| to %speed %&quot;" line212="    //% speed.min=0 speed.max=100" line213="    //% parts=&quot;A4_Robot_Driver&quot; advanced=false" line214="    //% speed.defl=75" line215="    //% subcategory=Motor  group=&quot;Motors DC&quot; color=#FF1344 icon=&quot;\uf1eb&quot;" line216="    export function motorSpeed(motor: Motors, speed: number): void {" line217="        setSpeed(motor, speed);" line218="        setMotors();" line219="    }" line220="" line221="    /**" line222="     * Stop both motors" line223="    */" line224="    //% blockId=RobotDriverRobotStop" line225="    //% block=&quot;stop both motors&quot;" line226="    //% subcategory=Motor  group=&quot;Motors DC&quot; color=#FF1344 icon=&quot;\uf1eb&quot;" line227="    export function motorStop(): void {" line228="        robotMove(hackbit.RobotDirection.Stop, 0)" line229="    }" line230="" line231="    /**" line232="     * Set the servomotor position [0-180deg]" line233="     * @param pin servomotor pin (right or left)" line234="     */" line235="    //% blockId=RobotDriverservodegrees" line236="    //% block=&quot;servomotor |%pin| to |%angle| degree&quot;" line237="    //% parts=&quot;RobotDriver&quot; advanced=false" line238="    //% angle.shadow=&quot;protractorPicker&quot;" line239="    //% angle.defl=90" line240="    //% subcategory=Motor  group=&quot;Servo Motors&quot; color=#FF1344 icon=&quot;\uf1eb&quot;" line241="    export function setServoMotor(pin: AnalogPin, angle: number): void {" line242="        pins.servoWritePin(pin, Math.constrain(angle, 0, 180));" line243="    }" line244="" line245="    /**" line246="     * get distance from ultrasonic range sensor [cm]" line247="     * @param pin Input pin" line248="     */" line249="    //% blockId=RobotDriverultrasonic_cm " line250="    //% block=&quot;ultrasonic distance|%name| (cm)&quot;" line251="    //% name.fieldEditor=&quot;gridpicker&quot; " line252="    //% name.fieldOptions.columns=5" line253="    //% name.fieldOptions.tooltips=&quot;false&quot;" line254="    //% name.fieldOptions.width=&quot;0&quot;" line255="    //% subcategory=Sensor  group=&quot;Digital&quot; color=#1371FF icon=&quot;\uf1eb&quot;" line256="    export function measureDistanceCentimeter(name: DigitalPin): number {" line257="        let duration = 0;" line258="        let distance = 0;" line259="        pins.digitalWritePin(name, 0); //make sure pin is low" line260="        control.waitMicros(2);" line261="        pins.digitalWritePin(name, 1); //send echo" line262="        control.waitMicros(20);" line263="        pins.digitalWritePin(name, 0);" line264="        duration = pins.pulseIn(name, PulseValue.High, 50000); // Max duration 50 ms - receive echo" line265="        distance = duration * 153 / 29 / 2 / 100;" line266="        Math.constrain(distance, 0, 500);" line267="        return distance;" line268="    }" line269="" line270="    /**" line271="     * Get line sensor state [0-1]" line272="    */" line273="    //% blockId=hackbitLineRead" line274="    //% block=&quot;line sensor |%pin|&quot;" line275="    //% subcategory=Sensor  group=&quot;Digital&quot; color=#1371FF icon=&quot;\uf1eb&quot;        " line276="    export function detectline(pin: DigitalPin): number {" line277="        return pins.digitalReadPin(pin);" line278="    }" line279="" line280="    /**" line281="     * Get analog potentiometer value [0-1023]" line282="    */" line283="    //% blockId=hackbitPotargRead" line284="    //% block=&quot;potentiometer |%pin|&quot;" line285="    //% subcategory=Input  group=&quot;Analog&quot; color=#851DE8 icon=&quot;\uf1eb&quot;" line286="    export function potarValue(pin: AnalogPin): number {" line287="        return pins.analogReadPin(pin);" line288="    }" line289="" line290="    /**" line291="     * Get collision sensor state [0-1]" line292="    */" line293="    //% blockId=hackbitCollisionRead" line294="    //% block=&quot;collision sensor |%pin|&quot;" line295="    //% subcategory=Input  group=&quot;Digital&quot; color=#851DE8 icon=&quot;\uf1eb&quot;    " line296="    export function collisionSensor(pin: BP): boolean {" line297="        if (pin)" line298="            return input.buttonIsPressed(Button.A);" line299="        return input.buttonIsPressed(Button.B);" line300="    }" line301="" line302="    /**" line303="     * Get button state [0-1]" line304="    */" line305="    //% blockId=hackbitButtonRead" line306="    //% block=&quot;button |%pin|&quot;" line307="    //% subcategory=Input  group=&quot;Digital&quot; color=#851DE8 icon=&quot;\uf1eb&quot;    " line308="    export function buttonState(pin: DigitalPin): number {" line309="        return pins.digitalReadPin(pin);" line310="    }" line311="" line312="    /**" line313="     * Set Led state" line314="    */" line315="    //% blockId=hackbitLedSet" line316="    //% block=&quot;led |%pin| to |%state|&quot;" line317="    //% state.min=0 state.max=1" line318="    //% subcategory=Display  group=&quot;Digital&quot; color=#F57513 icon=&quot;\uf1eb&quot;    " line319="    export function ledState(pin: DigitalPin, state: OnOff): void {" line320="        pins.digitalWritePin(pin, state);" line321="    }" line322="" line323="    /**" line324="    * Get color from I2C Grove Color Sensor v1.3 or v2.0" line325="    * [0;65534]" line326="    * @param selected color" line327="    */" line328="    //% blockId=&quot;grovecolorsensorgetcolor&quot; " line329="    //% block=&quot;color %Color&quot;" line330="    //% block.loc.fr=&quot;Valeur de la couleur %Color du capteur de couleur grove&quot;" line331="    //% jsdoc = &quot;Grab sensor value from grove color sensor&quot;" line332="    //% subcategory=Sensor  group=&quot;IIC&quot; color=#EA5532 icon=&quot;\uf1eb&quot;    " line333="" line334="    export function color(col: Color): NumberFormat.UInt16BE {" line335="        let nums, red, green, blue, clear: number;" line336="" line337="        if (identifiant == 0) {   // No sensor previously detected" line338="            pins.i2cWriteNumber(57, 132, NumberFormat.UInt8BE, false);" line339="            nums = pins.i2cReadNumber(57, NumberFormat.UInt8BE, false);" line340="            if (nums == 17) {     // Grove Sensor v1.3 detected" line341="                identifiant = 1;" line342="                pins.i2cWriteNumber(57, 129, NumberFormat.UInt8BE, false);" line343="                pins.i2cWriteNumber(57, 0, NumberFormat.UInt8BE, true);" line344="                pins.i2cWriteNumber(57, 135, NumberFormat.UInt8BE, false);" line345="                pins.i2cWriteNumber(57, 48, NumberFormat.UInt8BE, true);" line346="                pins.i2cWriteNumber(57, 128, NumberFormat.UInt8BE, false);" line347="                pins.i2cWriteNumber(57, 3, NumberFormat.UInt8BE, true);" line348="                basic.pause(50);" line349="            } else {" line350="                pins.i2cWriteNumber(41, 146, NumberFormat.UInt8BE, false);" line351="                nums = pins.i2cReadNumber(41, NumberFormat.UInt8BE, false);" line352="                if (nums == 68) {     // Grove Sensor v2 detected " line353="                    identifiant = 2;" line354="                    pins.i2cWriteNumber(41, 129, NumberFormat.UInt8BE, false);" line355="                    pins.i2cWriteNumber(41, 249, NumberFormat.UInt8BE, true);" line356="                    pins.i2cWriteNumber(41, 143, NumberFormat.UInt8BE, false);" line357="                    pins.i2cWriteNumber(41, 2, NumberFormat.UInt8BE, true);" line358="                    pins.i2cWriteNumber(41, 128, NumberFormat.UInt8BE, false);" line359="                    pins.i2cWriteNumber(41, 1, NumberFormat.UInt8BE, true);" line360="                    basic.pause(50);" line361="                    pins.i2cWriteNumber(41, 128, NumberFormat.UInt8BE, false);" line362="                    pins.i2cWriteNumber(41, 3, NumberFormat.UInt8BE, true);" line363="                    basic.pause(500);" line364="                }" line365="            }" line366="        }" line367="" line368="        if (identifiant == 1) {    // Grove Sensor v1.3 detected" line369="            switch (col) {" line370="                case Color.Red:" line371="                    pins.i2cWriteNumber(57, 210, NumberFormat.UInt8BE, false);" line372="                    red = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line373="                    return swap16(red)" line374="                    break" line375="                case Color.Green:" line376="                    pins.i2cWriteNumber(57, 208, NumberFormat.UInt8BE, false);" line377="                    green = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line378="                    return swap16(green)" line379="                    break" line380="                case Color.Blue:" line381="                    pins.i2cWriteNumber(57, 212, NumberFormat.UInt8BE, false);" line382="                    blue = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line383="                    return swap16(blue)" line384="                    break" line385="                case Color.Clear:" line386="                    pins.i2cWriteNumber(57, 214, NumberFormat.UInt8BE, false);" line387="                    clear = pins.i2cReadNumber(57, NumberFormat.UInt16BE, true);" line388="                    return swap16(clear)" line389="                    break" line390="            }" line391="        }" line392="        else if (identifiant == 2) {" line393="            switch (col) {" line394="                case Color.Red:" line395="                    pins.i2cWriteNumber(41, 150, NumberFormat.UInt8BE, false);" line396="                    red = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line397="                    return swap16(red)" line398="                    break" line399="                case Color.Green:" line400="                    pins.i2cWriteNumber(41, 152, NumberFormat.UInt8BE, false);" line401="                    green = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line402="                    return swap16(green)" line403="                    break" line404="                case Color.Blue:" line405="                    pins.i2cWriteNumber(41, 154, NumberFormat.UInt8BE, false);" line406="                    blue = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line407="                    return swap16(blue)" line408="                    break" line409="                case Color.Clear:" line410="                    pins.i2cWriteNumber(41, 148, NumberFormat.UInt8BE, false);" line411="                    clear = pins.i2cReadNumber(41, NumberFormat.UInt16BE, true);" line412="                    return swap16(clear)" line413="                    break" line414="            }" line415="            return 0;" line416="        }" line417="        return 0;" line418="    }" line419="" line420="    /**" line421="     * Detect and recognize the gestures from Grove - Gesture" line422="     * None:0" line423="     * Right:1" line424="     * Left:2" line425="     * Up:3" line426="     * Down:4" line427="     * Forward:5" line428="     * Backward:6" line429="     * Clockwise:7" line430="     * Anticlockwise:8" line431="     * Wave:9" line432="     */" line433="    //% blockId=hackbitGroveGesture" line434="    //% subcategory=Sensor  group=&quot;IIC&quot; color=#EA5532 icon=&quot;\uf1eb&quot;    " line435="    export function grove_gesture_reads(): number {" line436="        let data = 0, result = 0;" line437="" line438="        if (grovegestureinit == 0) {" line439="            paj7620Init();" line440="            basic.pause(200);" line441="            grovegestureinit = 1;" line442="        }" line443="" line444="        data = paj7620ReadReg(0x43);" line445="        switch (data) {" line446="            case 0x01:" line447="                result = GroveGesture.Right;" line448="                break;" line449="" line450="            case 0x02:" line451="                result = GroveGesture.Left;" line452="                break;" line453="" line454="            case 0x04:" line455="                result = GroveGesture.Up;" line456="                break;" line457="" line458="            case 0x08:" line459="                result = GroveGesture.Down;" line460="                break;" line461="" line462="            case 0x10:" line463="                result = GroveGesture.Forward;" line464="                break;" line465="" line466="            case 0x20:" line467="                result = GroveGesture.Backward;" line468="                break;" line469="" line470="            case 0x40:" line471="                result = GroveGesture.Clockwise;" line472="                break;" line473="" line474="            case 0x80:" line475="                result = GroveGesture.Anticlockwise;" line476="                break;" line477="" line478="            default:" line479="                data = paj7620ReadReg(0x44);" line480="                if (data == 0x01)" line481="                    result = GroveGesture.Wave;" line482="                break;" line483="        }" line484="        return result;" line485="    }" line486="" line487="    /**" line488="     * Create a new driver Grove - 4-Digit Display" line489="     * @param clkPin value of clk pin number" line490="     * @param dataPin value of data pin number" line491="     */" line492="    //% blockId=hackbit_tm1637_create block=&quot;4-Digit Display at|%clkPin|and|%dataPin&quot;" line493="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513 icon=&quot;\uf1eb&quot;    " line494="    //% weight=60" line495="    export function digit_createDisplay(clkPin: DigitalPin, dataPin: DigitalPin): void {" line496="        digit_buf = pins.createBuffer(4);" line497="        digit_clkPin = clkPin;" line498="        digit_dataPin = dataPin;" line499="        digit_brightnessLevel = 0;" line500="        digit_pointFlag = false;" line501="        digit_clear();" line502="    }" line503="" line504="    /**" line505="    * Show a 4 digits number on display" line506="    * @param dispData value of number" line507="    */" line508="    //% blockId=hackbit_tm1637_display_number block=&quot;show number|%dispData&quot;" line509="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513 icon=&quot;\uf1eb&quot;    " line510="    //% weight=59" line511="    export function digit_show(dispData: number) {" line512="        let compare_01: number = dispData % 100;" line513="        let compare_001: number = dispData % 1000;" line514="" line515="        if (dispData &lt; 10) {" line516="            digit_bit(dispData, 3);" line517="            digit_bit(0x7f, 2);" line518="            digit_bit(0x7f, 1);" line519="            digit_bit(0x7f, 0);" line520="        }" line521="        else if (dispData &lt; 100) {" line522="            digit_bit(dispData % 10, 3);" line523="            if (dispData &gt; 90) {" line524="                digit_bit(9, 2);" line525="            } else {" line526="                digit_bit(Math.floor(dispData / 10) % 10, 2);" line527="            }" line528="" line529="            digit_bit(0x7f, 1);" line530="            digit_bit(0x7f, 0);" line531="        }" line532="        else if (dispData &lt; 1000) {" line533="            digit_bit(dispData % 10, 3);" line534="            if (compare_01 &gt; 90) {" line535="                digit_bit(9, 2);" line536="            } else {" line537="                digit_bit(Math.floor(dispData / 10) % 10, 2);" line538="            }" line539="            if (compare_001 &gt; 900) {" line540="                digit_bit(9, 1);" line541="            } else {" line542="                digit_bit(Math.floor(dispData / 100) % 10, 1);" line543="            }" line544="            digit_bit(0x7f, 0);" line545="        }" line546="        else if (dispData &lt; 10000) {" line547="            digit_bit(dispData % 10, 3);" line548="            if (compare_01 &gt; 90) {" line549="                digit_bit(9, 2);" line550="            } else {" line551="                digit_bit(Math.floor(dispData / 10) % 10, 2);" line552="            }" line553="            if (compare_001 &gt; 900) {" line554="                digit_bit(9, 1);" line555="            } else {" line556="                digit_bit(Math.floor(dispData / 100) % 10, 1);" line557="            }" line558="            if (dispData &gt; 9000) {" line559="                digit_bit(9, 0);" line560="            } else {" line561="                digit_bit(Math.floor(dispData / 1000) % 10, 0);" line562="            }" line563="        }" line564="        else {" line565="            digit_bit(9, 3);" line566="            digit_bit(9, 2);" line567="            digit_bit(9, 1);" line568="            digit_bit(9, 0);" line569="        }" line570="    }" line571="" line572="    /**" line573="     * Set the brightness level of display at from 0 to 7" line574="     * @param level value of brightness light level" line575="     */" line576="    //% blockId=hackbit_tm1637_set_display_level block=&quot;brightness level to|%level&quot;" line577="    //% level.min=0 level.max=7" line578="    //% weight=58" line579="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513 icon=&quot;\uf1eb&quot;     " line580="    export function digit_set(level: number) {" line581="        digit_brightnessLevel = level;" line582="" line583="        digit_bit(digit_buf[0], 0x00);" line584="        digit_bit(digit_buf[1], 0x01);" line585="        digit_bit(digit_buf[2], 0x02);" line586="        digit_bit(digit_buf[3], 0x03);" line587="    }" line588="" line589="    /**" line590="     * Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display" line591="     * @param dispData value of number" line592="     * @param bitAddr value of bit number" line593="     */" line594="    //% blockId=grove_tm1637_display_bit block=&quot;%strip|show single number|%dispData|at digit|%bitAddr&quot;" line595="    //% dispData.min=0 dispData.max=9" line596="    //% bitAddr.min=0 bitAddr.max=3" line597="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513 icon=&quot;\uf1eb&quot;    " line598="    //% advanced=false" line599="    export function digit_bit(dispData: number, bitAddr: number) {" line600="        if ((dispData == 0x7f) || ((dispData &lt;= 9) &amp;&amp; (bitAddr &lt;= 3))) {" line601="            let segData = 0;" line602="" line603="            segData = digit_coding(dispData);" line604="            digit_start();" line605="            digit_writeByte(0x44);" line606="            digit_stop();" line607="            digit_start();" line608="            digit_writeByte(bitAddr | 0xc0);" line609="            digit_writeByte(segData);" line610="            digit_stop();" line611="            digit_start();" line612="            digit_writeByte(0x88 + digit_brightnessLevel);" line613="            digit_stop();" line614="" line615="            digit_buf[bitAddr] = dispData;" line616="        }" line617="    }" line618="" line619="    /**" line620="     * Turn on or off the colon point on Grove - 4-Digit Display" line621="     * @param pointEn value of point switch" line622="     */" line623="    //% blockId=grove_tm1637_display_point block=&quot;%strip|turn|%point|colon point&quot;" line624="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513 icon=&quot;\uf1eb&quot;   " line625="    //% advanced=false" line626="    export function digit_point(point: boolean) {" line627="        digit_pointFlag = point;" line628="" line629="        digit_bit(digit_buf[0], 0x00);" line630="        digit_bit(digit_buf[1], 0x01);" line631="        digit_bit(digit_buf[2], 0x02);" line632="        digit_bit(digit_buf[3], 0x03);" line633="    }" line634="" line635="    /**" line636="     * Clear the display" line637="     */" line638="    //% blockId=grove_tm1637_display_clear block=&quot;%strip|clear&quot;" line639="    //% subcategory=Display  group=&quot;7-Seg&quot; color=#F57513 icon=&quot;\uf1eb&quot;    " line640="    //% advanced=false" line641="    export function digit_clear() {" line642="        digit_bit(0x7f, 0x00);" line643="        digit_bit(0x7f, 0x01);" line644="        digit_bit(0x7f, 0x02);" line645="        digit_bit(0x7f, 0x03);" line646="    }" line647="" line648="    /**" line649="     * WiFi/IoT" line650="     * Initialize ESP8266 module and connect it to Wifi router" line651="     */" line652="    //% block=&quot;Initialize ESP8266|RX (Tx of micro:bit) %tx|TX (Rx of micro:bit) %rx|Baud rate %baudrate|Wifi SSID = %ssid|Wifi PW = %pw&quot;" line653="    //% tx.defl=SerialPin.P0" line654="    //% rx.defl=SerialPin.P1" line655="    //% ssid.defl=your_ssid" line656="    //% pw.defl=your_pw" line657="    //% subcategory=IoT group=&quot;ThingSpeak&quot; color=#00F5A9 icon=&quot;\uf1eb&quot;    " line658="    //% advanced=false" line659="" line660="    export function connectWifi(tx: SerialPin, rx: SerialPin, baudrate: BaudRate, ssid: string, pw: string) {" line661="        wifi_connected = false" line662="        thingspeak_connected = false" line663="        serial.redirect(" line664="            tx," line665="            rx," line666="            baudrate" line667="        )" line668="        sendAT(&quot;AT+RESTORE&quot;, 1000) // restore to factory settings" line669="        sendAT(&quot;AT+CWMODE=1&quot;) // set to STA mode" line670="        sendAT(&quot;AT+RST&quot;, 1000) // reset" line671="        sendAT(&quot;AT+CWJAP=\&quot;&quot; + ssid + &quot;\&quot;,\&quot;&quot; + pw + &quot;\&quot;&quot;, 0) // connect to Wifi router" line672="        wifi_connected = waitResponse()" line673="        basic.pause(100)" line674="    }" line675="" line676="    /**" line677="    * Connect to ThingSpeak and upload data. It would not upload anything if it failed to connect to Wifi or ThingSpeak." line678="    */" line679="    //% block=&quot;Upload data to ThingSpeak|URL/IP = %ip|Write API key = %write_api_key|Field 1 = %n1|Field 2 = %n2|Field 3 = %n3|Field 4 = %n4|Field 5 = %n5|Field 6 = %n6|Field 7 = %n7|Field 8 = %n8&quot;" line680="    //% ip.defl=api.thingspeak.com" line681="    //% write_api_key.defl=your_write_api_key" line682="    //% subcategory=IoT group=&quot;ThingSpeak&quot; color=#00F5A9 icon=&quot;\uf1eb&quot;    " line683="    //% advanced=false" line684="" line685="    export function connectThingSpeak(ip: string, write_api_key: string, n1: number, n2: number, n3: number, n4: number, n5: number, n6: number, n7: number, n8: number) {" line686="        if (wifi_connected &amp;&amp; write_api_key != &quot;&quot;) {" line687="            thingspeak_connected = false" line688="            sendAT(&quot;AT+CIPSTART=\&quot;TCP\&quot;,\&quot;&quot; + ip + &quot;\&quot;,80&quot;, 0) // connect to website server" line689="            thingspeak_connected = waitResponse()" line690="            basic.pause(100)" line691="            if (thingspeak_connected) {" line692="                last_upload_successful = false" line693="                let str: string = &quot;GET /update?api_key=&quot; + write_api_key + &quot;&amp;field1=&quot; + n1 + &quot;&amp;field2=&quot; + n2 + &quot;&amp;field3=&quot; + n3 + &quot;&amp;field4=&quot; + n4 + &quot;&amp;field5=&quot; + n5 + &quot;&amp;field6=&quot; + n6 + &quot;&amp;field7=&quot; + n7 + &quot;&amp;field8=&quot; + n8" line694="                sendAT(&quot;AT+CIPSEND=&quot; + (str.length + 2))" line695="                sendAT(str, 0) // upload data" line696="                last_upload_successful = waitResponse()" line697="                basic.pause(100)" line698="            }" line699="        }" line700="    }" line701="" line702="    /**" line703="    * Wait between uploads" line704="    */" line705="    //% block=&quot;Wait %delay ms&quot;" line706="    //% delay.min=0 delay.defl=5000" line707="    //% subcategory=IoT group=&quot;ThingSpeak&quot; color=#00F5A9 icon=&quot;\uf1eb&quot;    " line708="    //% advanced=false" line709="" line710="    export function wait(delay: number) {" line711="        if (delay &gt; 0) basic.pause(delay)" line712="    }" line713="" line714="    /**" line715="    * Check if ESP8266 successfully connected to Wifi" line716="    */" line717="    //% block=&quot;Wifi connected ?&quot;" line718="    //% subcategory=IoT group=&quot;ThingSpeak&quot; color=#00F5A9 icon=&quot;\uf1eb&quot;    " line719="    //% advanced=false" line720="" line721="    export function isWifiConnected() {" line722="        return wifi_connected" line723="    }" line724="" line725="    /**" line726="    * Check if ESP8266 successfully connected to ThingSpeak" line727="    */" line728="    //% block=&quot;ThingSpeak connected ?&quot;" line729="    //% subcategory=IoT group=&quot;ThingSpeak&quot; color=#00F5A9 icon=&quot;\uf1eb&quot;    " line730="    //% advanced=false" line731="" line732="    export function isThingSpeakConnected() {" line733="        return thingspeak_connected" line734="    }" line735="" line736="    /**" line737="    * Check if ESP8266 successfully uploaded data to ThingSpeak" line738="    */" line739="    //% block=&quot;Last data upload successful ?&quot;" line740="    //% subcategory=IoT group=&quot;ThingSpeak&quot; color=#00F5A9 icon=&quot;\uf1eb&quot;    " line741="    //% advanced=false" line742="" line743="    export function isLastUploadSuccessful() {" line744="        return last_upload_successful" line745="    }" line746="" line747="    /*" line748="     * Private functions" line749="     */" line750="    function swap16(val: NumberFormat.UInt16BE) {" line751="        return ((val &amp; 0xFF) &lt;&lt; 8)" line752="            | ((val &gt;&gt; 8) &amp; 0xFF);" line753="    }" line754="" line755="    function setDir(motor: Motors, dir: MotorDirection): void {" line756="        switch (motor) {" line757="            case Motors.Motor1: //gauche" line758="                _dir_left = dir;" line759="                break" line760="            case Motors.Motor2: //droit" line761="                _dir_right = dir;" line762="                break" line763="            case Motors.MotorFull: //droit" line764="                _dir_left = dir;" line765="                _dir_right = dir;" line766="                break" line767="        }" line768="    }" line769="" line770="    function setSpeed(motor: Motors, speed: number): void {" line771="        let corrected_speed = Math.min(Math.map(speed, 0, 100, 0, 1023), 1023);" line772="        switch (motor) {" line773="            case Motors.Motor1:" line774="                _speed_left = corrected_speed;" line775="                break" line776="            case Motors.Motor2:" line777="                _speed_right = corrected_speed;" line778="                break" line779="            case Motors.MotorFull:" line780="                _speed_left = corrected_speed;" line781="                _speed_right = corrected_speed;" line782="                break" line783="        }" line784="    }" line785="" line786="    function setMotors(): void {" line787="        if (_dir_right == 1) {" line788="            pins.digitalWritePin(DigitalPin.P15, 0);" line789="            pins.analogWritePin(AnalogPin.P16, _speed_right);" line790="        } else if (_dir_right == 2) {" line791="            pins.analogWritePin(AnalogPin.P15, _speed_right);" line792="            pins.digitalWritePin(DigitalPin.P16, 0);" line793="        } else {" line794="            pins.digitalWritePin(DigitalPin.P15, 0);" line795="            pins.digitalWritePin(DigitalPin.P16, 0);" line796="        }" line797="        if (_dir_left == 1) {" line798="            pins.digitalWritePin(DigitalPin.P13, 0);" line799="            pins.analogWritePin(AnalogPin.P14, _speed_left);" line800="        } else if (_dir_left == 2) {" line801="            pins.analogWritePin(AnalogPin.P13, _speed_left);" line802="            pins.digitalWritePin(DigitalPin.P14, 0);" line803="        } else {" line804="            pins.digitalWritePin(DigitalPin.P13, 0);" line805="            pins.digitalWritePin(DigitalPin.P14, 0);" line806="        }" line807="    }" line808="" line809="    function digit_writeByte(wrData: number) {" line810="        for (let i = 0; i &lt; 8; i++) {" line811="            pins.digitalWritePin(digit_clkPin, 0);" line812="            if (wrData &amp; 0x01) pins.digitalWritePin(digit_dataPin, 1);" line813="            else pins.digitalWritePin(digit_dataPin, 0);" line814="            wrData &gt;&gt;= 1;" line815="            pins.digitalWritePin(digit_clkPin, 1);" line816="        }" line817="" line818="        pins.digitalWritePin(digit_clkPin, 0); // Wait for ACK" line819="        pins.digitalWritePin(digit_dataPin, 1);" line820="        pins.digitalWritePin(digit_clkPin, 1);" line821="    }" line822="" line823="    function digit_start() {" line824="        pins.digitalWritePin(digit_clkPin, 1);" line825="        pins.digitalWritePin(digit_dataPin, 1);" line826="        pins.digitalWritePin(digit_dataPin, 0);" line827="        pins.digitalWritePin(digit_clkPin, 0);" line828="    }" line829="" line830="    function digit_stop() {" line831="        pins.digitalWritePin(digit_clkPin, 0);" line832="        pins.digitalWritePin(digit_dataPin, 0);" line833="        pins.digitalWritePin(digit_clkPin, 1);" line834="        pins.digitalWritePin(digit_dataPin, 1);" line835="    }" line836="" line837="    function digit_coding(dispData: number): number {" line838="        let pointData = 0;" line839="" line840="        if (digit_pointFlag == true) pointData = 0x80;" line841="        else if (digit_pointFlag == false) pointData = 0;" line842="" line843="        if (dispData == 0x7f) dispData = 0x00 + pointData;" line844="        else dispData = TubeTab[dispData] + pointData;" line845="" line846="        return dispData;" line847="    }" line848="" line849="    function paj7620WriteReg(addr: number, cmd: number) {" line850="        let buf: Buffer = pins.createBuffer(2);" line851="" line852="        buf[0] = addr;" line853="        buf[1] = cmd;" line854="" line855="        pins.i2cWriteBuffer(0x73, buf, false);" line856="    }" line857="" line858="    function paj7620ReadReg(addr: number): number {" line859="        let buf2: Buffer = pins.createBuffer(1);" line860="" line861="        buf2[0] = addr;" line862="" line863="        pins.i2cWriteBuffer(0x73, buf2, false);" line864="" line865="        buf2 = pins.i2cReadBuffer(0x73, 1, false);" line866="" line867="        return buf2[0];" line868="    }" line869="" line870="    function paj7620SelectBank(bank: number) {" line871="        if (bank == 0) paj7620WriteReg(0xEF, 0);" line872="        else if (bank == 1) paj7620WriteReg(0xEF, 1);" line873="    }" line874="" line875="    function paj7620Init() {" line876="        let temp = 0;" line877="" line878="        paj7620SelectBank(0);" line879="" line880="        temp = paj7620ReadReg(0);" line881="        if (temp == 0x20) {" line882="            for (let j = 0; j &lt; 438; j += 2) {" line883="                paj7620WriteReg(initRegisterArray[j], initRegisterArray[j + 1]);" line884="            }" line885="        }" line886="" line887="        paj7620SelectBank(0);" line888="    }" line889="" line890="    /**" line891="     * Iot ThingSpeak" line892="    **/" line893="" line894="    // write AT command with CR+LF ending" line895="    function sendAT(command: string, wait: number = 100) {" line896="        serial.writeString(command + &quot;\u000D\u000A&quot;)" line897="        basic.pause(wait)" line898="    }" line899="" line900="    // wait for certain response from ESP8266" line901="    function waitResponse(): boolean {" line902="        let serial_str: string = &quot;&quot;" line903="        let result2: boolean = false" line904="        let time: number = input.runningTime()" line905="        while (true) {" line906="            serial_str += serial.readString()" line907="            if (serial_str.length &gt; 200) serial_str = serial_str.substr(serial_str.length - 200)" line908="            if (serial_str.includes(&quot;OK&quot;) || serial_str.includes(&quot;ALREADY CONNECTED&quot;)) {" line909="                result2 = true" line910="                break" line911="            } else if (serial_str.includes(&quot;ERROR&quot;) || serial_str.includes(&quot;SEND FAIL&quot;)) {" line912="                break" line913="            }" line914="            if (input.runningTime() - time &gt; 30000) break" line915="        }" line916="        return result2" line917="    }" line918="    /**" line919="     * end Iot ThingSpeak" line920="    **/" line921="" line922="" line923="}" numlines="924"></mutation></block></statement></block></xml>